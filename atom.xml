<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>오늘도 끄적끄적</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://perfectacle.github.io/"/>
  <updated>2017-10-05T09:53:56.000Z</updated>
  <id>http://perfectacle.github.io/</id>
  
  <author>
    <name>양권성</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(ELB) HTTPS 서버를 열어보자</title>
    <link href="http://perfectacle.github.io/2017/10/05/https-with-elb/"/>
    <id>http://perfectacle.github.io/2017/10/05/https-with-elb/</id>
    <published>2017-10-05T08:50:29.000Z</published>
    <updated>2017-10-05T09:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="요청을 분산해주는 Load Balancer">  </p>
<p>ELB가 요청 분산 및 오토 스케일링을 위한 것도 있지만 SSL 암호화 지원도 해줘서<br>인스턴스에 SSL 인증서를 물리면 인스턴스에서 암/복호화 등등의 리소스 낭비가 이뤄지지만 ELB에 물리면 ELB에서 다 처리되기 때문에<br>서버 입장에서는 부담이 더 줄어들게 된다.<br>하지만 역시 공짜는 아니니 <img src="https://aws.amazon.com/ko/elasticloadbalancing/pricing/" alt="Elastic Load Balancing 요금"> 파트를 참조하자.<br>돈이 없거나(ㅜㅜ) 공부 목적이 있는 사람은 직접 <a href="/2017/10/05/letsencrypt-with-certbot-feat-aws/">EC2 인스턴스(서버)에 HTTPS 서버 열기</a>를 참고하자.  </p>
<h2 id="Certificate-Manager-SSL-인증서"><a href="#Certificate-Manager-SSL-인증서" class="headerlink" title="Certificate Manager(SSL 인증서)"></a>Certificate Manager(SSL 인증서)</h2><p>L4를 생성하기 전에 HTTPS 프로토콜을 위한 SSL 인증서를 만들어야한다.<br><a href="https://aws.amazon.com/ko/blogs/korea/new-aws-certificate-manager-deploy-ssltls-based-apps-on-aws/" rel="external nofollow noopener noreferrer" target="_blank">공짜라고 하니</a> 걱정하지말고 만들자.  </p>
<ol>
<li>Certificate Manager 서비스로 이동한다.  </li>
<li>상단에 있는 인증서 요청 클릭  </li>
<li>도메인 이름 입력(유효한 도메인인지 체크하지 않으므로 일단 원하는 도메인 입력)  </li>
<li>검토 및 요청 클릭 후 확인 및 요청 클릭 후 계속 클릭.  </li>
<li>인증서 검증 보류 상태인데 관리자 이메일로 인증서를 유효하게 만들 수 있는 이메일이 갔을 것이고, 그 이메일을 확인해서 인증서를 확인시켜주자.    </li>
<li>상태가 발급완료로 뜨면 끝.</li>
</ol>
<p>쫀쫀(?)하게도 다운로드는 지원하지 않는다.<br>AWS 내에서만 쓸 수 있는데 SSL 인증서를 요구하는 서비스들이 대부분 유료기 때문에 노림수로 만든 거 같다.</p>
<h2 id="ELB-L4-Load-Balancer"><a href="#ELB-L4-Load-Balancer" class="headerlink" title="ELB (L4, Load Balancer)"></a>ELB (L4, Load Balancer)</h2><p>L4로 요청을 보내면 로드 밸런싱 전략에 맞게 각각의 요청을 각 인스턴스에 맞게 분배시켜주는 역할을 한다.<br>L4는 Layer 4, OSI 7계층의 4계층인 Transport Layer를 뜻하는 것 같다.  </p>
<ol>
<li>EC2 서비스로 이동한다.  </li>
<li>좌측 메뉴 중에 LOAD BALANCING - Load Balancers 메뉴로 이동한다.  </li>
<li>Create Load Balancer 버튼을 클릭하자.  </li>
<li>세 가지가 나오는데 우리는 Application Load Balancer를 Create하면 된다.<br>잘은 모르겠지만, Network Load Balancer는 대용량 처리를 위한 것 같고,<br>Classic Load Balancer는 과거 방식(물리적인 서버를 구성해서 해당 서버를 로드 밸런서로 활용, 아마도 트래픽을 감당 못해서 그렇게 한 듯?)인데<br>현재는 소프트웨어(nginx 같은 웹서버 등등)로 처리할 수 있을 정도로 많은 발전이 이뤄진 것 같다.  </li>
<li>Name은 L4를 식별하기 위한 이름,<br>Scheme에서 internet-facing은 외부에서도 접근 가능한 것이고, internal은 내부에서만 사용하는 것인데 우리는 외부 접속을 위해서도 쓰므로 internet-facing을 선택.<br>IP address type은 IPv4로도 충분하니 내비두자.  </li>
<li>리스너 프로토콜은 보안을 위해 HTTP는 HTTPS로 리다이렉트를 위해 내비두고,<br>Add Listener를 클릭해서 HTTPS(443 포트)도 추가해주.  </li>
<li>Availability Zones에서 VPC(IDC 같은 역할)<br>어느 IDC에 존재하는 인스턴스를 이용할지 모르므로(확장성 고려?) Availability Zone을 모두 체크하고 Next!  </li>
<li>Certificate type &gt; Choose a certificate from ACM (recommended)를 선택하고(기본적으로 선택돼있긴 하지만…) SSL 인증서를 선택하고 Next!  </li>
<li>Security Group을 선택하고 Next!  </li>
<li>New Target Group으로 내비두고 이름 설정하고, Protocol은 HTTP로 target type은 instance로 하고 Next!<br>실제 인스턴스에는 HTTPS를 위한 SSL 인증서를 물려놓은 게 아니므로 HTTP로 선택해야한다.  </li>
<li>인스턴스 선택하고 80번 포트로 Add to registered 버튼 클릭으로 추가하고 Next하고 Create로 마무리 하자.</li>
<li>다시 로드 밸런서 서비스로 이동해서 해당 로드밸런서의 DNS Name을 카피해두자.</li>
</ol>
<h2 id="Route-53-도메인-등록"><a href="#Route-53-도메인-등록" class="headerlink" title="Route 53 (도메인 등록)"></a>Route 53 (도메인 등록)</h2><p>DNS용으로 사용하는 TCP/UDP 포트로 53번 포트를 사용하는데 그것에 유래해서 Route 53이란 이름을 지은 것 같다.  </p>
<ol>
<li>Route 53 서비스로 이동하자.  </li>
<li>Hosted zones로 이동해서 원하는 도메인 네임이 없으면 새로 생성하고, 도메인 네임을 클릭해서 들어가자.</li>
<li>Name에 서브 도메인을 입력하고, Alias를 Yes로 체크한 후에 ELB의 DNS Name을 입력하고 Create를 클릭하면 된다. </li>
</ol>
<h2 id="웹서버-설정"><a href="#웹서버-설정" class="headerlink" title="웹서버 설정"></a>웹서버 설정</h2><p>여기서는 nginx를 사용하지만 다른 서버도 비슷할 것으로 예상된다.  </p>
<ol>
<li>터미널을 이용해서 ELB에 물려놓은 EC2 인스턴스로 접속을 한다.  </li>
<li>nginx 서버에서 다음와 같이 설정을 해주어야한다.<br>기본적인 설정 파일은 /etc/nginx/conf.d/virtual.conf에 있다.  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  ~.;</div><div class="line"></div><div class="line">    <span class="comment"># ELB stores the protocol used between the client</span></div><div class="line">    <span class="comment"># and the load balancer in the X-Forwarded-Proto request header.</span></div><div class="line">    <span class="comment"># Check for 'https' and redirect if not</span></div><div class="line">    <span class="keyword">if</span> (<span class="variable">$http_x_forwarded_proto</span> != <span class="string">'https'</span>) &#123;</div><div class="line">        rewrite ^ https://<span class="variable">$host</span><span class="variable">$request_uri</span>? permanent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header HOST <span class="variable">$http_host</span>;</div><div class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line"></div><div class="line">        proxy_pass http://127.0.0.1:8080;</div><div class="line">        proxy_redirect off;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이제 브라우저로 접속해서 http to https 및 SSL 인증서가 제대로 적용됐는지 확인해보면 된다.  </p>
<h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>끝이다.<br>혹시 공부 목적이거나 과금이 부담된다면 <a href="/2017/10/05/letsencrypt-with-certbot-feat-aws/">EC2 인스턴스(서버)에 HTTPS 서버 열기</a>를 참고하자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;요청을 분산해주는 Load Balancer&quot;&gt;  &lt;/p&gt;
&lt;p&gt;ELB가 요청 분산 및 오토 스케일링을 위한 것도 있지만 SSL 암호화 지원도 해줘서&lt;br&gt;인스턴스에 SSL 인증서를 물리면 인스턴스에서
    
    </summary>
    
      <category term="Middle-end" scheme="http://perfectacle.github.io/categories/Middle-end/"/>
    
      <category term="DevOps" scheme="http://perfectacle.github.io/categories/Middle-end/DevOps/"/>
    
    
      <category term="ELB" scheme="http://perfectacle.github.io/tags/ELB/"/>
    
      <category term="CertificateManager" scheme="http://perfectacle.github.io/tags/CertificateManager/"/>
    
      <category term="HTTPS" scheme="http://perfectacle.github.io/tags/HTTPS/"/>
    
      <category term="AWS" scheme="http://perfectacle.github.io/tags/AWS/"/>
    
      <category term="EC2" scheme="http://perfectacle.github.io/tags/EC2/"/>
    
      <category term="Route53" scheme="http://perfectacle.github.io/tags/Route53/"/>
    
      <category term="Nginx" scheme="http://perfectacle.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>(Certbot) 공짜로 HTTPS 서버를 열어보자. (feat. AWS)</title>
    <link href="http://perfectacle.github.io/2017/10/05/letsencrypt-with-certbot-feat-aws/"/>
    <id>http://perfectacle.github.io/2017/10/05/letsencrypt-with-certbot-feat-aws/</id>
    <published>2017-10-05T06:47:46.000Z</published>
    <updated>2017-10-07T11:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="귀염둥이 Certbot"></p>
<p>기본적으로 서버와 도메인(SSL 인증서에 넣을)은 확보가 돼있는 상태로 진행을 해야한다.<br>자본이 빵빵하고(?) 좀 더 간단한 걸 원한다면 <a href="/2017/10/05/https-with-elb/">AWS ELB로 HTTPS 서버 열기</a>를 보자.<br>해당 포스트는 ELB 말고 인스턴스에 직접 도메인을 달고, 인스턴스에서 직접 HTTPS 서버를 서비스 하고자 하는 포스트이다.</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP 통신은 데이터를 암호화하지 않아서 보안에 취약하다.<br>따라서 HTTPS 프로토콜로 통신을 해야하는데 암/복호화를 하려면 키가 존재해야하고,<br>그 키는 인증된 기관에서 만든 게 아니면 신뢰할 수 없는 키가 된다.<br>이 키에 대한 정보가 SSL 인증서에 들어가있는 것이고 이 SSL 인증서를 발급해주는 기관들이 따로 있다.<br>(사실 SSL의 이름은 TLS로 바뀌었지만 계속해서 SSL로 쓰이는 듯…)<br>그런데 그 인증서를 발급해주는 기관에서는 돈을 받고 SSL 인증서를 발급해주고 일정 기간마다 돈을 추가로 내서 갱신해야한다.  </p>
<h2 id="공짜-SSL-인증서-발급기관"><a href="#공짜-SSL-인증서-발급기관" class="headerlink" title="공짜 SSL 인증서 발급기관"></a>공짜 SSL 인증서 발급기관</h2><p><a href="https://letsencrypt.org/" rel="external nofollow noopener noreferrer" target="_blank">Let’s Encrypt</a>라는 사이트에서 공짜로 SSL 인증서를 발급해준다.<br>과거에는 어떻게 했는지 모르겠지만 지금은 <a href="https://certbot.eff.org/" rel="external nofollow noopener noreferrer" target="_blank">Certbot</a>이라는 프로그램을 통해서<br>Let’s Encrypt의 SSL 인증서를 발급받을 수 있다.<br>또한 Let’s Encrypt는 90일 동안만 유효한 SSL 인증서를 발급해주는데 Certbot을 이용하면 갱신이 매우 쉬워진다.  </p>
<h2 id="Route-53-도메인-설정하기"><a href="#Route-53-도메인-설정하기" class="headerlink" title="Route 53(도메인) 설정하기"></a>Route 53(도메인) 설정하기</h2><p>기본적으로 도메인을 확보한 이후에 또 해야하는 게 있다.<br>바로 해당 도메인에 대한 CAA(Certificate Authority Authorization) Record를 추가해야한다.<br><a href="https://sslmate.com/caa/" rel="external nofollow noopener noreferrer" target="_blank">SSLMate’s CAA Record Generator</a>에 들어가면 만들 수 있다지만 들어가봐도 네트워크 지식이 없다보니 그냥 아래 스샷과 같이 만들었다.<br><img src="route53.png" alt="SSL 인증서 발급을 위한 CAA Record"><br>name에는 당연히 발급을 위한 도메인이 들어가야한다.</p>
<h2 id="Certbot"><a href="#Certbot" class="headerlink" title="Certbot"></a>Certbot</h2><p><a href="https://certbot.eff.org/" rel="external nofollow noopener noreferrer" target="_blank">Certbot</a> 사이트에 들어가면 어떻게 설치하는지 나오지만 나도 헷갈려서 직접 정리해보았다.<br><strong>이 포스트에서는 OS는 Amazon Linux AMI와 웹서버는 nginx를 사용하였다.</strong></p>
<p>혹시 커맨드를 입력했을 때 권한이 없다고 하면 귀찮으니까 root 유저로 진행하자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo su</div></pre></td></tr></table></figure></p>
<p>SSL 인증서를 발급받기 전에 nginx와 같은 웹서버는 무조건 중단해야한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx stop</div></pre></td></tr></table></figure></p>
<p>이제 아래 커맨드를 입력해서 certbot 설치를 하자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -O https://dl.eff.org/certbot-auto</div><div class="line">chmod +x certbot-auto</div><div class="line">mv certbot-auto /usr/bin/certbot-auto</div></pre></td></tr></table></figure></p>
<p>그리고 실제 SSL 인증서를 발급받아보도록 하자.<br>현재 AWS Linux는 아직 정식 지원이 아닌지 –debug를 붙여줘야한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">certbot-auto certonly --standalone -d 발급받을도메인</div><div class="line"></div><div class="line"><span class="comment"># 위 과정에서 이메일을 물어볼 수도 있다.</span></div><div class="line"><span class="comment"># 아래와 같은 메시지가 나온다면 발급에 성공한 것이다.</span></div><div class="line"><span class="comment"># IMPORTANT NOTES:</span></div><div class="line"><span class="comment">#  - Congratulations! Your certificate and chain have been saved at</span></div><div class="line"><span class="comment">#    /etc/letsencrypt/live/example.com/fullchain.pem. Your cert will</span></div><div class="line"><span class="comment">#    expire on 2018-mm-dd. To obtain a new version of the certificate in</span></div><div class="line"><span class="comment">#    the future, simply run Certbot again.</span></div><div class="line"><span class="comment">#  - If you like Certbot, please consider supporting our work by:</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="comment">#    Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate</span></div><div class="line"><span class="comment">#    Donating to EFF:                    https://eff.org/donate-le</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">There were too many requests of a given type :: Error creating new authz :: Too many invalid authorizations recently.</div><div class="line">Please see the logfiles in /var/log/letsencrypt for more details.</div></pre></td></tr></table></figure>
<p>위와 같은 오류를 만났다면 단시간 내에 SSL 발급 요청을 너무 많이 했는데 모두<br>유효하지 않은 요청이라 악의적이라 판단해서 해당 도메인에 대해 발급 요청이 일시 중단된 상태이다.<br>1시간 가량 기다린 후에 진행하면 다시 되는 것 같다.  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- The following errors were reported by the server:</div><div class="line">Domain: &lt;my_domain&gt;</div><div class="line">Type: connection</div><div class="line">Detail: CAA record for &lt;my_domain&gt; prevents issuance</div></pre></td></tr></table></figure>
<p>위와 같은 오류는 도메인에 CAA record가 제대로 등록되지 않았다는 것이다.<br>도메인명과 CAA 레코드에 제대로 된 값들이 들어갔는지 다시 확인해보자.  </p>
<h2 id="적용하기"><a href="#적용하기" class="headerlink" title="적용하기"></a>적용하기</h2><p>nginx 서버에서 다음와 같이 설정을 해주어야한다.<br>기본적인 설정 파일은 /etc/nginx/conf.d/virtual.conf에 있다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  ~.;</div><div class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>80번 포트로 들어오면 다시 https로 리다이렉트 시키는 부분이다.<br>301 redirect는 영구적으로 옮겼을 때 사용한다.  </p>
<p>그리고 아래 부분에는 HTTPS 서버를 리스닝 하는 부분을 추가해주자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    server_name  ~.;</div><div class="line">    listen 443;</div><div class="line">    </div><div class="line">    ssl                  on;</div><div class="line">    ssl_certificate      /etc/letsencrypt/live/도메인/fullchain.pem;</div><div class="line">    ssl_certificate_key  /etc/letsencrypt/live/도메인/privkey.pem;</div><div class="line">    ssl_session_cache shared:SSL:1m;</div><div class="line">    ssl_session_timeout  10m;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_ciphers HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP;</div><div class="line">    ssl_prefer_server_ciphers   on;</div><div class="line"></div><div class="line">    <span class="comment"># 특정 포트로 다시 보내고 싶을 때</span></div><div class="line">    <span class="comment"># location / &#123;</span></div><div class="line">    <span class="comment">#     proxy_set_header X-Real-IP $remote_addr;</span></div><div class="line">    <span class="comment">#     proxy_set_header HOST $http_host;</span></div><div class="line">    <span class="comment">#     proxy_set_header X-NginX-Proxy true;</span></div><div class="line">    <span class="comment">#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></div><div class="line"> </div><div class="line">    <span class="comment">#     proxy_pass http://127.0.0.1:8080;</span></div><div class="line">    <span class="comment">#     proxy_redirect off;</span></div><div class="line">    <span class="comment"># &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>도메인 부분에 SSL 인증서를 발급받은 도메인을 입력하면 된다.<br>그리고 실제 톰캣과 같은 WAS나 서버가 띄워져있는 포트로 보내려면 주석을 지우고 포트를 바꿔주면 된다.<br>그리고 아래와 같이 nginx 서버를 재구동 하고 브라우저에서 도메인을 입력하고 http to https와 ssl 인증서가 제대로 적용됐는지 확인해보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service nginx start</div><div class="line"><span class="comment"># 혹시 재시작이 안 됐다면 아래 커맨드를 입력하자.</span></div><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>
<h2 id="자동-갱신하기"><a href="#자동-갱신하기" class="headerlink" title="자동 갱신하기"></a>자동 갱신하기</h2><p>Certbot으로 발급 받았다 하더라도 Let’s Encrypt의 SSL 인증서를 발급받은 것이기 때문에 유효기간은 90일이다.<br>따라서 수동으로 갱신할 때 명령어는 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">certbot-auto renew</div></pre></td></tr></table></figure></p>
<p>하지만 갱신일이 30일 이상 남은 경우에는 아래와 같은 오류를 보게될 것이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cert not yet due for renewal</div></pre></td></tr></table></figure></p>
<p>따라서 테스트를 위해서는 –dry-run 옵션을 추가해야한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">certbot-auto renew --dry-run</div></pre></td></tr></table></figure></p>
<p>하지만 이번에는 아래와 같은 오류가 나게 된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">produced an unexpected error: Problem binding to port 443: Could not bind to IPv4 or IPv6.. Skipping.</div><div class="line">All renewal attempts failed. The following certs could not be renewed</div></pre></td></tr></table></figure></p>
<p>갱신하려는 인증서를 이미 nginx 서버에서 사용중이기 때문에 갱신이 불가능하다는 내용이다.<br>따라서 nginx를 스탑하고 갱신하고 다시 start 해야하는데 귀찮으므로 hook 옵션을 제공해서 아래와 같이 사용하면 된다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">certbot-auto renew --pre-hook <span class="string">"service nginx stop"</span> --post-hook <span class="string">"service nginx start"</span> --dry-run</div></pre></td></tr></table></figure>
<p>드디어 아래와 같은 성공 메시지를 보게 될 것이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Congratulations, all renewals succeeded. The following certs have been renewed:</div></pre></td></tr></table></figure></p>
<p>하지만 아직 테스트 단계이므로 실제로 갱신이 이루어지지는 않는다.<br>갱신일이 궁금하다면 아래 커맨드를 입력하면 된다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> | openssl s_client -connect localhost:443 2&gt;/dev/null | openssl x509 -noout -dates</div></pre></td></tr></table></figure></p>
<p>30일 남았는지 일일이 체크해서 갱신하기란 매우 귀찮다.<br>따라서 매달 1일에 갱신하는 커맨드를 실행하게 끔 crontab을 사용하자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 잡을 등록</span></div><div class="line">crontab -e</div><div class="line"></div><div class="line"><span class="comment"># 그리고 아래 잡을 추가하고 저장하자.</span></div><div class="line">0 0 1 * * certbot-auto renew --pre-hook <span class="string">"service nginx stop"</span> --post-hook <span class="string">"service nginx start"</span></div><div class="line"></div><div class="line"><span class="comment"># 등록된 잡 목록 보기</span></div><div class="line">crontab -l</div></pre></td></tr></table></figure></p>
<p>crontab 규칙은 <a href="https://crontab.guru/" rel="external nofollow noopener noreferrer" target="_blank">crontab.guru</a>에서 확인할 수 있고, 직접 만들거나 결과를 예측해볼 수도 있다.  </p>
<h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>끝이다.<br>아직 나도 갱신일이 30일 넘게 남아서(사실 오늘 만들어봤지만…) 테스트를 해보지 않았다.<br>나중에 시간이 지나면 잘 되는지 보고 다시 수정해봐야겠다.<br>이 과정이 좀 어렵고 자본이 빵빵하다면(?) <a href="/2017/10/05/https-with-elb/">AWS ELB로 HTTPS 서버 열기</a>를 보자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;귀염둥이 Certbot&quot;&gt;&lt;/p&gt;
&lt;p&gt;기본적으로 서버와 도메인(SSL 인증서에 넣을)은 확보가 돼있는 상태로 진행을 해야한다.&lt;br&gt;자본이 빵빵하고(?) 좀 더 간단한 걸 원한다면 &lt;a href=&quot;
    
    </summary>
    
      <category term="Middle-end" scheme="http://perfectacle.github.io/categories/Middle-end/"/>
    
      <category term="DevOps" scheme="http://perfectacle.github.io/categories/Middle-end/DevOps/"/>
    
    
      <category term="HTTPS" scheme="http://perfectacle.github.io/tags/HTTPS/"/>
    
      <category term="AWS" scheme="http://perfectacle.github.io/tags/AWS/"/>
    
      <category term="EC2" scheme="http://perfectacle.github.io/tags/EC2/"/>
    
      <category term="Route53" scheme="http://perfectacle.github.io/tags/Route53/"/>
    
      <category term="Nginx" scheme="http://perfectacle.github.io/tags/Nginx/"/>
    
      <category term="LetsEncrypt" scheme="http://perfectacle.github.io/tags/LetsEncrypt/"/>
    
      <category term="Certbot" scheme="http://perfectacle.github.io/tags/Certbot/"/>
    
  </entry>
  
  <entry>
    <title>지도 API 성능 개선기</title>
    <link href="http://perfectacle.github.io/2017/09/28/map-api-performance-improvement/"/>
    <id>http://perfectacle.github.io/2017/09/28/map-api-performance-improvement/</id>
    <published>2017-09-28T14:29:16.000Z</published>
    <updated>2017-10-07T09:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="">  </p>
<h2 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h2><p><img src="01.png" alt="크롬 개발자 도구 네트워크 탭에서 본 API 호출"><br>Time은 데이터 전체를 파싱하는데 걸린 시간이니 무시하고…<br>트래픽이 13MB 남짓…<br>사용자가 조건을 바꿔서 검색을 한다면 데이터 광탈범이 될 가능성이 다분한 상황이었다.  </p>
<p><img src="03.png" alt="순수 응답 시간을 알고 싶어서 다운로드 받아봄"><br>응답 시간이 22초 남짓…  </p>
<p><img src="16.png" alt="StopWatch를 통해 어느 작업에서 병목이 가장 많이 발생하는지 파악">  </p>
<h2 id="원인-파악"><a href="#원인-파악" class="headerlink" title="원인 파악"></a>원인 파악</h2><h3 id="쿼리"><a href="#쿼리" class="headerlink" title="쿼리"></a>쿼리</h3><p><img src="17.png" alt="숙박 연동사 실제 가격 주입하는 부분"><br>숙박 연동 최저가는 jooq로 불러오고 있고, 숙박 연동사 테이블은 jpa로 불러오고 있음.<br>순수 네이티브 쿼리가 아닌 이상 퍼포먼스가 제대로 나오지 않을 것으로 판단됨.  </p>
<p><img src="05.png" alt="딜 목록 불러오는 쿼리"><br>실제로 필요한 건 특정 필드 뿐인데 모든 필드를 다 긁어오고 있어서 쿼리 실행속도가 느려진 것임.  </p>
<h3 id="용량"><a href="#용량" class="headerlink" title="용량"></a>용량</h3><p><img src="08.png" alt="실제로 저장된 응답값"><br>이 응답값에는 세 가지 문제점이 존재한다.</p>
<p><img src="09.png" alt="쓸 데 없는 공백을 포함하고 있었다."><br>이 데이터를 줄였을 때 1MB 정도 가량이 줄어들었다.</p>
<p><img src="10.png" alt="쓸 데 없는 컬럼들도 포함하고 있었다."><br>treeAllId라던지, clusterName이나 빈 배열 등등 다른 값들을 가지고 유추할 수 있는 값들을 제거하였다.<br>딱히 이 부분에서는 데이터를 크게 줄일 수가 없었다.  </p>
<p><img src="11.png" alt="컬럼의 값을 가공하지 않고 그대로 들고 있다."><br>이미지의 URL을 담고 있는 컬럼을 불러와서 필요한 정보만 뿌려주는 게 아니라 모든 데이터를 가공없이 뿌려주고 있었다.<br>이 컬럼의 데이터가 하나의 딜에 대한 데이터의 3/4 이상을 차지하고 있었다.<br>대부분의 쓸 데 없는 데이터가 여기서 낭비되고 있었다.</p>
<h2 id="문제-해결"><a href="#문제-해결" class="headerlink" title="문제 해결"></a>문제 해결</h2><h3 id="아예-API-서버로-따로-분리"><a href="#아예-API-서버로-따로-분리" class="headerlink" title="아예 API 서버로 따로 분리"></a>아예 API 서버로 따로 분리</h3><p>맵 API는 방대한 양의 데이터를 가져오므로 서버의 리소스 사용이 많아 아예 별도의 서버로 구축하기로 판단했다.<br>하지만 실제 가격을 주입하기 위해서는 유저의 등급이 필요한데 API 서버에는 유저에 대한 정보를 가지고 있지 않기 때문에 아래와 같은 구조로 구성하게 됨.<br><img src="server.png" alt="서버 구조"><br>가자고 프론트 서버는 타지 않는 게 제일 베스트인데 유저 정보에 따른 실제 가격 주입 때문에 어쩔 수 없이 넣게 되었다.  </p>
<h3 id="빠른-응답속도-보장"><a href="#빠른-응답속도-보장" class="headerlink" title="빠른 응답속도 보장"></a>빠른 응답속도 보장</h3><p>클러스터와 딜을 함께 내려주다보니 초기에 유저가 기다려야하는 속도는 15~20초 남짓 대기해야한다.<br><img src="12.png" alt="이 화면에서 클러스터를 그리기 위한 정보는 중심 좌표, 지역 코드, 딜 갯수가 끝이다."><br>굳이 딜 목록까지 내려 줄 필요가 없다고 판단이 들어서 클러스터(갯수 포함) 따로 딜 따로 내려주게 끔 API를 두 개로 분리하였다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/api/v1/map/hotel (클러스터)</div><div class="line">/api/v1/map/hotel/deals (딜, 기존 API)</div></pre></td></tr></table></figure></p>
<p>클러스터를 그리기 위한 클러스터 API는 응답 속도가 1~2초 남짓이라 유저가 불편을 느끼지 못할 수준이다.<br>유저가 방심(?)하는 사이에 몰래(?) 딜을 뿌려주는 API를 호출하고 있으면 웬만한 유저들에게는 불편함을 주지 않을 것이다.  </p>
<h3 id="중간-점검"><a href="#중간-점검" class="headerlink" title="중간 점검"></a>중간 점검</h3><p><img src="18.png" alt="데이터는 2MB 남짓으로 줄어들었고, 응답속도도 11초 가량 걸렸다."></p>
<p><img src="19.png" alt="가장 오래 걸리는 게 숙박 딜 실제 가격 주입 부분이다."><br>아직 이정도 시간 가지고는 서비스 하기에는 무리가 있어 보였다.  </p>
<h3 id="캐싱하기"><a href="#캐싱하기" class="headerlink" title="캐싱하기"></a>캐싱하기</h3><p><strong>딜들과 카테고리 ID를 매핑하는 부분</strong>과 <strong>숙박 딜의 실제 가격을 주입하는 부분</strong>은 애초부터 판매 중인 모든 딜에 대한 정보만 들고있으면 된다.<br>즉, 조건에 구애받지 않는다는 뜻이다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> HotelDealMinPricesMapper hotelDealMinPricesMapper;</div><div class="line">    <span class="keyword">private</span> DealPartnersMapper dealPartnersMapper;</div><div class="line">    <span class="keyword">private</span> TreeDealMapMapper treeDealMapMapper;</div><div class="line">    <span class="keyword">private</span> CategoryIds categoryIds;</div><div class="line">    <span class="keyword">private</span> HotelPartnersAndPrices hotelPartnersAndPrices;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span><span class="params">(</span></span></div><div class="line">            HotelDealMinPricesMapper hotelDealMinPricesMapper, DealPartnersMapper dealPartnersMapper,</div><div class="line">            TreeDealMapMapper treeDealMapMapper, CategoryIds categoryIds, HotelPartnersAndPrices hotelPartnersAndPrices</div><div class="line">    ) &#123;</div><div class="line">        <span class="keyword">this</span>.hotelDealMinPricesMapper = hotelDealMinPricesMapper;</div><div class="line">        <span class="keyword">this</span>.dealPartnersMapper = dealPartnersMapper;</div><div class="line">        <span class="keyword">this</span>.treeDealMapMapper = treeDealMapMapper;</div><div class="line">        <span class="keyword">this</span>.categoryIds = categoryIds;</div><div class="line">        <span class="keyword">this</span>.hotelPartnersAndPrices = hotelPartnersAndPrices;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** crontab</span></div><div class="line">     1.Seconds</div><div class="line">     2.Minutes</div><div class="line">     3.Hours</div><div class="line">     4.Day-of-Month</div><div class="line">     5.Month</div><div class="line">     6.Day-of-Week</div><div class="line">     7.Year (optional field)</div><div class="line">     */</div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/30 * * * ?"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeisureAndHotelCategoryIds</span><span class="params">()</span> </span>&#123;</div><div class="line">        categoryIds.setLeisureCategoryIds(treeDealMapMapper.selectLeisureCategoryId());</div><div class="line">        categoryIds.setHotelCategoryIds(treeDealMapMapper.selectHotelCategoryId());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/30 * * * ?"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPricesAndPartners</span><span class="params">()</span> </span>&#123;</div><div class="line">        hotelPartnersAndPrices.setPartners(dealPartnersMapper.selectDealPartnersAll());</div><div class="line">        hotelPartnersAndPrices.setPrices(hotelDealMinPricesMapper.selectMinPricesAll());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>서버를 띄웠을 때 최초 1회, 30분 마다 캐싱하도록 설정하였다.  </p>
<h3 id="최종-점검"><a href="#최종-점검" class="headerlink" title="최종 점검"></a>최종 점검</h3><p><img src="20.png" alt="4~6초 가량으로 줄어들었다.">  </p>
<p><img src="21.png" alt="최대 오래 걸리는 게 딜 목록을 불러오는 부분이다.">  </p>
<p><img src="22.png" alt="실제 쿼리 실행은 0.01초도 안 걸린다.">  </p>
<p><img src="24.png" alt="MyBatis로 해당 쿼리를 실행하는데 걸린 시간은 1초가 넘는다."></p>
<p>혹시 MyBatis라서 느린건가 싶어서 JDBC로 쿼리를 날려봤다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotelMapper2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HotelMapper2</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate =  jdbcTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;DealInMap&gt; <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"Select d.id, d.deal_nm, d.`STANDARD_PRICE`, d.zeropass_price, d.group_price, d.lat, d.lon,\n"</span> +</div><div class="line">                <span class="string">"d.tax_and_fee, ct.`tree_code`, d.deal_type, d.`LIST_IMAGE_JSON`\n"</span> +</div><div class="line">                <span class="string">"From DEAL_M d\n"</span> +</div><div class="line">                <span class="string">"Join TREE_DEAL_MAP tdm\n"</span> +</div><div class="line">                <span class="string">"    on d.id = tdm.deal_id\n"</span> +</div><div class="line">                <span class="string">"Join `CATEGORY_TREE` ct\n"</span> +</div><div class="line">                <span class="string">"    on tdm.`CATEGORY_TREE_ID` = ct.id and ct.tree_group_id = 27 and ct.depth = 2\n"</span> +</div><div class="line">                <span class="string">"Join HOTEL_DEAL_MIN_PRICES p\n"</span> +</div><div class="line">                <span class="string">"    on p.deal_id = d.id and p.expire_at &gt; now() and p.ymd Between '2017-10-07' And '2017-10-07' and p.max_capacity &gt;= 1\n"</span> +</div><div class="line">                <span class="string">"Where deal_status = 'IN_SALE' And d.display_yn = 'Y' and display_standard_yn = 'Y' And del_yn = 'N' And deal_type != 'DEAL'\n"</span> +</div><div class="line">                <span class="string">"And d.lat is not NULL And d.lon is not NULL\n"</span> +</div><div class="line">                <span class="string">"Group by d.id"</span>;</div><div class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;DealInMap&gt;(DealInMap.class));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="25.png" alt="하지만 큰 변함은 없었다."></p>
<p><img src="26.png" alt="제일 데이터가 큰 컬럼인 LIST_IMAGE_JSON 컬럼을 빼자 속도가 3배 가량 빨라졌다."><br>따라서 모든 딜의 LIST_IMAGE_JSON 컬럼 또한 캐시하도록 하였다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PostConstruct</span></div><div class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/30 * * * ?"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDealsThumbnail</span><span class="params">()</span> </span>&#123;</div><div class="line">    thumbs.setLeisureThumbs(dealMMapper.selectLeisureThumbnail());</div><div class="line">    thumbs.setHotelThumbs(dealMMapper.selectHotelThumbnail());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="27.png" alt="훨씬 빨라진 실행 속도들"></p>
<h2 id="차후-개선-사항-시간-문제-및-공수와-효율성-문제"><a href="#차후-개선-사항-시간-문제-및-공수와-효율성-문제" class="headerlink" title="차후 개선 사항 (시간 문제 및 공수와 효율성 문제)"></a>차후 개선 사항 (시간 문제 및 공수와 효율성 문제)</h2><ul>
<li>2MB로 줄였다 하더라도 필터를 계속해서 바꾸다 보면 유저 입장에서는 부담되는 용량일 수도 있다.<br><img src="15.png" alt="또한 딜을 내려주는 API에서 반복되는 키값을 빼고 순서를 보장한 배열로 만들어 내려주는 형태로 바꿔주면 데이터를 0.5MB 이상 단축할 수 있다.">    </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;h2 id=&quot;문제점&quot;&gt;&lt;a href=&quot;#문제점&quot; class=&quot;headerlink&quot; title=&quot;문제점&quot;&gt;&lt;/a&gt;문제점&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;01.png&quot; alt=&quot;크롬 개발
    
    </summary>
    
      <category term="Note" scheme="http://perfectacle.github.io/categories/Note/"/>
    
      <category term="Dev" scheme="http://perfectacle.github.io/categories/Note/Dev/"/>
    
    
      <category term="Performance" scheme="http://perfectacle.github.io/tags/Performance/"/>
    
      <category term="API" scheme="http://perfectacle.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>(Spring Boot) Gradle의 Profile(dev/production)을 구분지어보자.</title>
    <link href="http://perfectacle.github.io/2017/09/23/Spring-boot-gradle-profile/"/>
    <id>http://perfectacle.github.io/2017/09/23/Spring-boot-gradle-profile/</id>
    <published>2017-09-22T16:06:20.000Z</published>
    <updated>2017-09-24T13:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="">  </p>
<p>메이븐은 기본적으로 빌드할 때 프로필을 지정할 수 있는 것 같은데 gradle은 직접 삽질을 하면서 깨달았다.<br>다음의 글들을 보고 Spring boot 1.5.7과 Gradle 3.x(아마)? 에 맞게, 내 입맛에 맞게 각색해보았다.  </p>
<ul>
<li><a href="http://osozaki.tistory.com/14" rel="external nofollow noopener noreferrer" target="_blank">Gradle 배포 환경 별 설정파일 분리</a></li>
<li><a href="http://yookeun.github.io/java/2016/04/11/gradle-packing/" rel="external nofollow noopener noreferrer" target="_blank">Gradle에서 서버별 패키징 하기</a></li>
</ul>
<h2 id="Profile-구성하기"><a href="#Profile-구성하기" class="headerlink" title="Profile 구성하기"></a>Profile 구성하기</h2><p>기본적인 스프링 부트 프로젝트는 다음과 같은 구조를 가질 것이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+ project명</div><div class="line">  + src</div><div class="line">    + main</div><div class="line">      + java</div><div class="line">        + package명</div><div class="line">          - Application.java</div><div class="line">      + resources</div><div class="line">        - application.properties</div><div class="line">    + test</div><div class="line">- build.gradle</div><div class="line">- gradlew</div><div class="line">- gradlew.bat</div></pre></td></tr></table></figure></p>
<p>이를 다음과 같이 나눠보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">+ project</div><div class="line">  + src</div><div class="line">    + main</div><div class="line">      + java</div><div class="line">        + package</div><div class="line">          - Application.java</div><div class="line">      + resources</div><div class="line">        - application-core.properties</div><div class="line">      + resources-env</div><div class="line">        + dev</div><div class="line">          - application.properties</div><div class="line">        + prod</div><div class="line">          - application.properties</div><div class="line">    + test</div><div class="line">- build.gradle</div><div class="line">- gradlew</div><div class="line">- gradlew.bat</div></pre></td></tr></table></figure></p>
<p>…/resources에는 공통적으로 쓰는 설정들이 들어가면 된다.<br>application-core.properties에는 테스트 삼아서 다음과 같이 저장해주자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.profiles.active=core</div><div class="line">core=core</div></pre></td></tr></table></figure></p>
<p>…/resources-env/dev에는 개발에 필요한 파일들만 들어가면 된다.<br>application.properties에는 테스트 삼아서 다음과 같이 지정해주자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=dev</div></pre></td></tr></table></figure></p>
<p>…/resources-env/prod에는 개발에 필요한 파일들만 들어가면 된다.<br>application.properties에는 테스트 삼아서 다음과 같이 지정해주자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=prod</div></pre></td></tr></table></figure></p>
<h2 id="build-gradle-수정하기"><a href="#build-gradle-수정하기" class="headerlink" title="build.gradle 수정하기"></a>build.gradle 수정하기</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ext.profile = (!project.hasProperty(<span class="string">'profile'</span>) || !profile) ? 'dev' : profile</div><div class="line"></div><div class="line">sourceSets &#123;</div><div class="line">	main &#123;</div><div class="line">		resources &#123;</div><div class="line">			srcDirs <span class="string">"src/main/resources"</span>, <span class="string">"src/main/resources-env/$&#123;profile&#125;"</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>profile 속성의 기본값은 dev이고 그 값에 따라서 리소스 폴더를 지정하는 것이다.<br>resources 폴더는 공통적으로 쓰이는 설정 파일들이기 때문에 공통적으로 들어가면 된다.  </p>
<p>샘플 예제는 다음과 같다.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">	ext &#123;</div><div class="line">		springBootVersion = <span class="string">'1.5.7.RELEASE'</span></div><div class="line">	&#125;</div><div class="line">	repositories &#123;</div><div class="line">		mavenCentral()</div><div class="line">	&#125;</div><div class="line">	dependencies &#123;</div><div class="line">		classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'eclipse'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></div><div class="line"></div><div class="line"><span class="comment">// 이 위치 전에 profile을 구분하는 구문이 오면 오류가 난다.</span></div><div class="line"></div><div class="line">group = <span class="string">'com.example'</span></div><div class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">	mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">	compile(<span class="string">'org.springframework.boot:spring-boot-starter'</span>)</div><div class="line">	testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">ext.profile = (!project.hasProperty(<span class="string">'profile'</span>) || !profile) ? 'dev' : profile</div><div class="line"></div><div class="line">sourceSets &#123;</div><div class="line">	main &#123;</div><div class="line">		resources &#123;</div><div class="line">			srcDirs <span class="string">"src/main/resources"</span>, <span class="string">"src/main/resources-env/$&#123;profile&#125;"</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="properties를-사용하는-스프링-빈-만들기"><a href="#properties를-사용하는-스프링-빈-만들기" class="headerlink" title="properties를 사용하는 스프링 빈 만들기"></a>properties를 사용하는 스프링 빈 만들기</h2><p>project/src/main/java/package명 아래에 Bean.java를 만들어주자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;core&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String core;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String test;</div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</div><div class="line">        System.out.println(core);</div><div class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</div><div class="line">        System.out.println(test);</div><div class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@PostConstruct 어노테이션을 사용해서 간단하게 스프링 컨텍스트?가 로딩된 이후에 메소드를 실행하게 했다.<br>또한 스프링 빈으로 등록해야 profile에 있는 값을 불러올 수 있으므로 @Component 어노테이션을 사용했다.<br>@Value 어노테이션은 profile에 등록된 값을 얻어오는 녀석이다. </p>
<h2 id="실행하기"><a href="#실행하기" class="headerlink" title="실행하기"></a>실행하기</h2><p>당연히 터미널에서 프로젝트 디렉토리로 이동해야한다.  </p>
<ul>
<li>Gradle CLI 사용하기<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! prod</span></div><div class="line">SPRING_PROFILES_ACTIVE=core gradle clean bootRun -Pprofile=prod</div><div class="line"><span class="comment">#! dev</span></div><div class="line">SPRING_PROFILES_ACTIVE=core gradle clean bootRun</div></pre></td></tr></table></figure>
</li>
</ul>
<p>…/resources 디렉토리 내의 properties 파일을 뒤져서 spring.profiles.active가 core인 녀석을 찾아서 적용시킨다는 내용이다.<br>또한 profile이라는 매개변수에 prod를 인자로 넘긴다는 뜻이다.<br>profile의 기본값을 dev로 지정해줬기 때문에 dev용 bootRun에서는 빼줘도 된다.</p>
<ul>
<li>Gradlew 사용하기<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! prod</span></div><div class="line">SPRING_PROFILES_ACTIVE=core ./gradlew clean bootRun -Pprofile=prod</div><div class="line"><span class="comment">#! dev</span></div><div class="line">SPRING_PROFILES_ACTIVE=core ./gradlew clean bootRun</div></pre></td></tr></table></figure>
</li>
</ul>
<p>graldew는 Gradle CLI 설치 안 한 사람, 혹은 Gradle의 버전에 의존하지 않고 항상 동일한 Gradle 버전으로 빌드/실행고 싶을 때 매우 유용하다.<br>gradlew를 이용하기 위해서는 gradle/wrapper 디렉도리에 있는 gradle-wrapper.properties와 gradle-wrapper.jar 파일이 필요하다.<br>따라서 해당 디렉토리를 .gitignore에 등록하는 불상사를 일으키지 말자.</p>
<ul>
<li>IDE 사용하기<br>IDE를 사용하면 GUI라는 친숙한 환경, 클릭 한 번으로 여러 환경 변수와 설정을 넣어서 실행할 수 있다는 장점이 있다.<br>물론 AWS나 CLI만 지원하는 환경이라면 위의 두 방법을 활용해야할 것이다.<br>인텔리제이(갓텔리제이)를 찬양 경배하므로 갓텔리제이로 설명.<br><img src="01.png" alt="IDE 우상단에 있는 박스를 누르고 Edit Configurations...을 선택"><br><img src="02.png" alt="설정 창에서 좌상단에 보이는 + 버튼을 눌러 Gradle을 선택"><br><img src="03.png" alt=""><br>Name에는 프로덕션용으로 bootRun prod를 넣어주고, Gradle project에 project 이름(자동완성 됨)을 입력하고,<br>우측 상단의 Single instance only를 체크해서 서버는 하나만 뜨게 하자.(중복 실행 방지, 포트 충돌 방지)<br>tasks에는 실행할 태스크를 입력하면 되는데 bootRun이 spring boot를 실행하는 태스크이다.<br>그리고 Arguments에 해당 인자를 넘겨야 prod profile이 적용되고,<br>Environment Variables에 SPRING_PROFILES_ACTIVE=core까지 지정해줘서 core profile까지 사용하도록 하자.<br>또한 task가 실행되기 전에 clean task를 실행해야하므로 좌하단에 보이는 노란색 박스에 있는 + 버튼을 눌러주자.<br><img src="04.png" alt="Run Gradle Task를 선택해주자."><br><img src="05.png" alt="위와 같은 형태로 입력해주자."><br><img src="06.png" alt="개발용 bootRun Task도 만들어주자"><br>production과 동일한데 Arguments에 인자를 넘길 필요가 없다.<br>왜냐하면 dev profile이 기본값이기 때문이다.<br><img src="07.png" alt="bootRun 태스크를 선택하고 실행/디버깅을..."></li>
</ul>
<p>위 방법으로 실행해보면 prod/dev에 따라 다른 결과가 나오는 부분도 있고 core에서 불러온 값은 항상 동일하다.  </p>
<h2 id="빌드하기"><a href="#빌드하기" class="headerlink" title="빌드하기"></a>빌드하기</h2><p>SPRING_PROFILES_ACTIVE=core가 빠진 이유는 빌드할 때는 리소스(profile이 담긴) 디렉토리는 지정할 수 있지만<br>profile 파일 자체를 지정할 수는 없기 때문이고, 실행할 때 넘겨줘야한다.  </p>
<ul>
<li><p>Gradle CLI 사용하기</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! prod</span></div><div class="line">gradle clean build -Pprofile=prod</div><div class="line"><span class="comment">#! dev</span></div><div class="line">gradle clean build</div></pre></td></tr></table></figure>
</li>
<li><p>Gradlew 사용하기(Gradle CLI 설치 안 한 사람)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! prod</span></div><div class="line">./gradlew clean build -Pprofile=prod</div><div class="line"><span class="comment">#! dev</span></div><div class="line">./gradlew clean build</div></pre></td></tr></table></figure>
</li>
<li><p>IDE 사용하기<br><img src="01.png" alt="IDE 우상단에 있는 박스를 누르고 Edit Configurations...을 선택"><br><img src="02.png" alt="설정 창에서 좌상단에 보이는 + 버튼을 눌러 Gradle을 선택"><br><img src="08.png" alt="프로덕션용 build task"><br><a href="#실행하기">실행하기</a>의 IDE 사용하기 파트를 참고해서 내용을 채워넣자.<br><img src="09.png" alt="개발용 build task"><br><a href="#실행하기">실행하기</a>의 IDE 사용하기 파트를 참고해서 내용을 채워넣자.<br><img src="10.png" alt="build 태스크를 선택하고 실행/디버깅을...">  </p>
</li>
</ul>
<h2 id="왜-이렇게-빌드해야하는-걸까"><a href="#왜-이렇게-빌드해야하는-걸까" class="headerlink" title="왜 이렇게 빌드해야하는 걸까?"></a>왜 이렇게 빌드해야하는 걸까?</h2><p><img src="11.png" alt="빌드할 때 사용된 리소스들"><br>다른 방식으로 하게되면 개발용/프로덕션용 리소스(+코어 리소스는 필수이므로 제외) 두 개 다 포함되게 된다.<br>그럼 개발 서버의 jar 파일이 털렸을 때 압축파일만 풀면 프로덕션 DB 정보 등등까지 알아낼 수 있게 된다.<br>따라서 보안 측면에서 이렇게 좀 귀찮게(?) 빌드해야하는 것이다.  </p>
<h2 id="빌드한-결과물을-실행하기"><a href="#빌드한-결과물을-실행하기" class="headerlink" title="빌드한 결과물을 실행하기"></a>빌드한 결과물을 실행하기</h2><p>서버에 jar(던 war던) 파일을 배포해서 실행을 할 때는 다음과 같이 하면 된다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar -Dspring.profiles.active=core application.jar</div></pre></td></tr></table></figure></p>
<h2 id="테스트-코드-작성하기"><a href="#테스트-코드-작성하기" class="headerlink" title="테스트 코드 작성하기"></a>테스트 코드 작성하기</h2><p>test 디렉토리로 가서 기본적으로 만들어진 테스트 클래스를 다음과 같이 수정해주자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"core"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;core&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String core;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String test;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertThat(core, is(<span class="string">"core"</span>));</div><div class="line">        assertThat(test, is(<span class="string">"dev"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>class 이름은 본인이 만든 거에 맞게 설정하고, 테스트 툴은 JUnit4를 사용하였다.(스프링 부트 기본 내장)<br>@ActiveProfiles를 넣어서 spring.profiles.active=core인 profile을 찾는 것이다.<br>또한 테스트를 실행할 때 profile 매개변수를 넘기지 않았으므로(모든 테스트에 다 넘기려면 ㅎㄷㄷ…) 기본값인 dev profile이 적용된다.<br>스프링 컨텍스트가 제대로 로드됐는지 확인하기 위해 @Value 어노테이션으로 profile에 저장된 값을 불러오고 그걸 검증하는 테스트 코드를 짜봤다.  </p>
<p>이거 때문에 총 삽질한 시간만 8시간 이상은 되는 것 같다.<br>또 정리만 3시간 이상을… 또르르… ㅠㅠ</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;메이븐은 기본적으로 빌드할 때 프로필을 지정할 수 있는 것 같은데 gradle은 직접 삽질을 하면서 깨달았다.&lt;br&gt;다음의 글들을 보고 Spring boot 1.5.7과 Grad
    
    </summary>
    
      <category term="Back-end" scheme="http://perfectacle.github.io/categories/Back-end/"/>
    
      <category term="Spring Boot" scheme="http://perfectacle.github.io/categories/Back-end/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://perfectacle.github.io/tags/Spring-Boot/"/>
    
      <category term="Gradle" scheme="http://perfectacle.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>(Spring Boot) get/post 리퀘스트를 다뤄보자.</title>
    <link href="http://perfectacle.github.io/2017/09/19/Spring-boot-get-post-mapping/"/>
    <id>http://perfectacle.github.io/2017/09/19/Spring-boot-get-post-mapping/</id>
    <published>2017-09-18T15:50:51.000Z</published>
    <updated>2017-09-24T13:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="">  </p>
<p>근본없이 궁금한 부분만 찾아서 공부하다보니 아직 정리가 덜 된 글이다 보니 그 점은 감안하고 보길 바란다.</p>
<h2 id="컨트롤러를-만들자"><a href="#컨트롤러를-만들자" class="headerlink" title="컨트롤러를 만들자"></a>컨트롤러를 만들자</h2><p>Node.js(+Express)의 Router와 매우 유사한 것 같다.<br>URI와 http method, parameter만 매핑해주는 녀석이다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">sayHello</span><span class="params">(</span></span></div><div class="line">            @RequestParam String name,</div><div class="line">            @RequestParam <span class="keyword">int</span> age,</div><div class="line">            @RequestParam(required = <span class="keyword">false</span>) String hobby</div><div class="line">            ) &#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        person.setHobby(hobby);</div><div class="line">        person.setName(name);</div><div class="line">        person.setAge(age);</div><div class="line">        <span class="keyword">return</span> person;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(</span></span></div><div class="line">            @RequestBody Person person</div><div class="line">    ) &#123;</div><div class="line">        System.out.println(person.getAge());</div><div class="line">        System.out.println(person.getHobby());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://highcode.tistory.com/24" rel="external nofollow noopener noreferrer" target="_blank">@RestController</a>에 대한 설명은 링크를 참조하자.  </p>
<p>get일 때는 파라미터를 URI에 실어서 보내고, post일 때는 body에 실어보내면 된다.<br>나는 큰 착각을 한 게 post로 보낼 때는 대부분 json으로 보내는 경우가 많다보니<br>json의 프로퍼티와 컨트롤러에 매핑된 함수의 파라미터가 유사할 줄 알았다.<br>하지만 요청 json과 유사한 형태의 VO(Value Object)? TO(Transfer Object)? DO(Domain Object)?<br>를 만들어야하는데 셋 중에 뭐가 맞는 말인지 모르겠다.  </p>
<h2 id="VO-TO-DO"><a href="#VO-TO-DO" class="headerlink" title="VO? TO? DO?"></a>VO? TO? DO?</h2><p>여튼 만들어보자.<br>Person이라는 클래스를 만들면 된다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> String hobby;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String hobby)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hobby = hobby;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>이와 매핑되는 리퀘스트 json은 다음과 같을 것이다.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"name"</span>: <span class="string">"양간장"</span>,</div><div class="line">	<span class="attr">"age"</span>: <span class="number">20</span>,</div><div class="line">	<span class="attr">"hobby"</span>: <span class="string">"자전거 타기"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="요청-응답하기"><a href="#요청-응답하기" class="headerlink" title="요청/응답하기"></a>요청/응답하기</h2><p>실제 서버를 띄우고 이제 <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop" rel="external nofollow noopener noreferrer" target="_blank">포스트맨</a>을 가지고 장난질을 해보자.  </p>
<p>요청 헤더: <code>get http://localhost:8080/api/?name=양권성&amp;age=22</code><br>응답:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"age"</span>: <span class="number">22</span>,</div><div class="line">    <span class="attr">"hobby"</span>: <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>왜 name은 안 뜨는 걸지 골똘히 고민해보자.  </p>
<p>요청 헤더: <code>post http://localhost:8080/api/ Content-Type=application/json</code><br>요청 바디:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"name"</span>: <span class="string">"양간장"</span>,</div><div class="line">	<span class="attr">"age"</span>: <span class="number">20</span>,</div><div class="line">	<span class="attr">"hobby"</span>: <span class="string">"자전거 타기"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>Request Body에 json으로 데이터를 실어 보낼 때 주의해야한다.<br>무조건 DO(아니면 VO 또는 TO)를 만들고 그걸 파라미터로 받자.<br>multipart나 FormData로 전송하는 경우는 나중에 다뤄봐야겠다.  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;근본없이 궁금한 부분만 찾아서 공부하다보니 아직 정리가 덜 된 글이다 보니 그 점은 감안하고 보길 바란다.&lt;/p&gt;
&lt;h2 id=&quot;컨트롤러를-만들자&quot;&gt;&lt;a href=&quot;#컨트롤러를-
    
    </summary>
    
      <category term="Back-end" scheme="http://perfectacle.github.io/categories/Back-end/"/>
    
      <category term="Spring Boot" scheme="http://perfectacle.github.io/categories/Back-end/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://perfectacle.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>(Spring Boot) properties 값을 불러와보자</title>
    <link href="http://perfectacle.github.io/2017/09/18/Spring-boot-properties-use/"/>
    <id>http://perfectacle.github.io/2017/09/18/Spring-boot-properties-use/</id>
    <published>2017-09-17T16:15:10.000Z</published>
    <updated>2017-09-24T13:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="">  </p>
<p>근본없이 궁금한 부분만 찾아서 공부하다보니 아직 정리가 덜 된 글이다 보니 그 점은 감안하고 보길 바란다.  </p>
<h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>Node.js로 서버를 구성하다보면 포트 등등의 설정 정보를 json으로 저장하듯이 스프링 부트에서는 properties 파일을 사용하는 것 같다.<br>물론 YAML 파일로도 만들 수 있는 것 같은데 일단 아는 게 properties 파일이다보니 그걸로 진행해보겠다.<br>우선 스프링 부트를 만들면 기본 파일인 application.properties 파일을 아래와 같이 구성해보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key=&quot;asdf&quot;</div></pre></td></tr></table></figure></p>
<h2 id="properties-사용하는-클래스-만들기"><a href="#properties-사용하는-클래스-만들기" class="headerlink" title="properties 사용하는 클래스 만들기"></a>properties 사용하는 클래스 만들기</h2><p>이제 이걸 사용하는 클래스를 만들어보자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tests</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;key&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String key;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>눈여겨 볼 어노테이션이 두 개 있다.  </p>
<ul>
<li><p>Component<br>스프링에서 관리하는 빈이라는 걸 알려주기 위한 어노테이션인 것 같다.<br>자바 빈과 스프링 빈은 차이가 있다.<br>자바 빈은 기본 생성자가 있고, getter, setter 메소드가 있고 등등의 특징이 있는 클래스인 것 같다.<br>스프링 빈은 스프링 컨테이너(?)에 의해 관리되는 객체들을 스프링 빈이라고 부르는 것 같다.<br>(자세한 설명은 <a href="https://stackoverflow.com/questions/21866571/difference-javabean-and-spring-bean" rel="external nofollow noopener noreferrer" target="_blank">Difference JavaBean and Spring bean</a>을 참고하자.)<br>여튼 properties에 있는 값을 사용하려면 둘이 스프링에 의해 같이 관리돼야하기 때문에<br>클래스를 스프링 빈으로 등록해야하는 것 같다.<br>자세하게는 모르겠다 ㅠㅠ<br><a href="http://jojoldu.tistory.com/27" rel="external nofollow noopener noreferrer" target="_blank">@Bean vs @Component</a>을 보면 둘 사이에도 명확한 차이가 있는 것 같은데 링크를 참조해보자. (나도 잘 모르니 ㅠㅠ)  </p>
</li>
<li><p>Value<br>properties의 어느 속성을 적용할지 정하는 것 같다.  </p>
</li>
</ul>
<h2 id="테스트-코드로-테스트-하기"><a href="#테스트-코드로-테스트-하기" class="headerlink" title="테스트 코드로 테스트 하기"></a>테스트 코드로 테스트 하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"><span class="keyword">import</span> javax.inject.Inject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.core.Is.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestsTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span> <span class="keyword">private</span> Tests tests;</div><div class="line">    <span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertThat(<span class="string">"asdf"</span>, is(tests.getKey()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Test test = new Test();</code>와 같은 방식 대신에 @Inject 어노테이션을 사용했다.<br><code>@Autowired</code>와 동일한 역할을 한다고 한다.<br>다만 Inject는 자바에서 지원하는 표준 어노테이션이고, Autowired는 스프링에서 지원해주는 것 같다.<br>build.gradle의 dependency에 <code>compile(&#39;javax.inject:javax.inject:1&#39;)</code> 을 추가하면 된다.<br>자세한 설명은 아래 링크를…<br><a href="http://deoki.tistory.com/28" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC 어노테이션 기반 설정 - 2 . @Autowired</a>  </p>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>중요한 것은 @Component, @Value, @Inject(@Autowired) 라는 점을 생각하자!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;근본없이 궁금한 부분만 찾아서 공부하다보니 아직 정리가 덜 된 글이다 보니 그 점은 감안하고 보길 바란다.  &lt;/p&gt;
&lt;h2 id=&quot;properties&quot;&gt;&lt;a href=&quot;#pro
    
    </summary>
    
      <category term="Back-end" scheme="http://perfectacle.github.io/categories/Back-end/"/>
    
      <category term="Spring Boot" scheme="http://perfectacle.github.io/categories/Back-end/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://perfectacle.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>(Spring) 자바 빈즈 객체를 XML 파일로 관리하면서 DI하기 - @Autowired</title>
    <link href="http://perfectacle.github.io/2017/09/05/spring-di-v3/"/>
    <id>http://perfectacle.github.io/2017/09/05/spring-di-v3/</id>
    <published>2017-09-04T16:02:25.000Z</published>
    <updated>2017-09-04T16:17:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<p>Car 클래스를 수정해보자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Tire tire33;</div><div class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tire33;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire</span><span class="params">(Tire tire)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tire33 = tire;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">  http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">  http://www.springframework.org/schema/context</div><div class="line">  http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tire33"</span> <span class="attr">class</span>=<span class="string">"KoreanTire"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"americanTire"</span> <span class="attr">class</span>=<span class="string">"AmericanTire"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"Car"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>@Autowired 한 멤버 변수와 bean의 id가 매칭되는 걸 볼 수 있다.<br>또한 <context:annotation-config>을 추가해줘야하고, property 태그의 생략이 가능하다.  </context:annotation-config></p>
<p>참조 블로그 - <a href="http://expert0226.tistory.com/194" rel="external nofollow noopener noreferrer" target="_blank">스프링을 통한 의존성 주입 - @Autowired 를 통한 속성 주입</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Car 클래스를 수정해보자.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="Back-end" scheme="http://perfectacle.github.io/categories/Back-end/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/categories/Back-end/Spring/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/tags/Spring/"/>
    
      <category term="DI" scheme="http://perfectacle.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>(Spring) 자바 빈즈 객체를 XML 파일로 관리하면서 DI하기 - property 태그</title>
    <link href="http://perfectacle.github.io/2017/09/05/spring-di-v2/"/>
    <id>http://perfectacle.github.io/2017/09/05/spring-di-v2/</id>
    <published>2017-09-04T15:35:53.000Z</published>
    <updated>2017-09-04T16:16:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<p>beans.xml 파일을 수정해보자.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"koreanTire"</span> <span class="attr">class</span>=<span class="string">"KoreanTire"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"americanTire"</span> <span class="attr">class</span>=<span class="string">"AmericanTire"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"Car"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tire2"</span> <span class="attr">ref</span>=<span class="string">"koreanTire"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>beans의 property는 getter/setter와 매핑이 된다.<br>Car.java를 수정해보자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Tire tire;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(Tire tire)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tire = tire;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tire;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire2</span><span class="params">(Tire tire)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tire = tire;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Driver.java를 수정해보자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Driver.java</span></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/src/beans.xml"</span>);</div><div class="line">        Car car = (Car)context.getBean(<span class="string">"car"</span>);</div><div class="line"></div><div class="line">        car.getTire2().wheel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>property를 지정했기 때문에 koreanTire가 DI됐다.  </p>
<p>참조 블로그 - <a href="http://expert0226.tistory.com/193" rel="external nofollow noopener noreferrer" target="_blank">스프링을 통한 의존성 주입 - 스프링 설정 파일(xml)에서 속성 주입</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;beans.xml 파일을 수정해보자.&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
    
    </summary>
    
      <category term="Back-end" scheme="http://perfectacle.github.io/categories/Back-end/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/categories/Back-end/Spring/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/tags/Spring/"/>
    
      <category term="DI" scheme="http://perfectacle.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>(Spring) 자바 빈즈 객체를 XML 파일로 관리하면서 DI하기 - 기본</title>
    <link href="http://perfectacle.github.io/2017/09/04/spring-di-v1/"/>
    <id>http://perfectacle.github.io/2017/09/04/spring-di-v1/</id>
    <published>2017-09-03T15:35:22.000Z</published>
    <updated>2017-09-04T16:16:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<p>일반 자바를 가지고 DI를 해본 <a href="/2017/09/04/di-v3/">v3</a>에서는 Car 클래스를 자바 빈즈 스펙을 제대로 준수해서 만들지 않았다.<br>따라서 한 번 자바 빈즈 스펙에 맞춰 바꿔보자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Tire tire;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(Tire tire)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tire = tire; </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tire;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire</span><span class="params">(Tire tire)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tire = tire;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>getter/setter와 기본 생성자가 있어야 자바 빈즈 스펙을 준수한 것이었는데 저번에는 기본 생성자가 없어서 추가했다.<br>그럼 이제 beans.xml 파일을 만들고 자바 빈즈 객체들을 등록해보자.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tire"</span> <span class="attr">class</span>=<span class="string">"KoreanTire"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"americanTire"</span> <span class="attr">class</span>=<span class="string">"AmericanTire"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"Car"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>id 부분에는 식별할 수 있는 이름을 적고, class에는 패키지와 클래스명 포함 풀 경로를 적어주면 된다.  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Driver.java</span></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/src/beans.xml"</span>);</div><div class="line">        Car car = (Car)context.getBean(<span class="string">"car"</span>);</div><div class="line">        Tire tire = (Tire)context.getBean(<span class="string">"tire"</span>);</div><div class="line">        car.setTire(tire);</div><div class="line"></div><div class="line">        car.getTire().wheel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xml에서 id가 tire인 애만 바꾸면 컴파일을 다시 하지 않아도 타이어의 교체가 가능해진다.<br>하지만 여기서 코드가 더 줄어들을 수 있다.<br><a href="/2017/09/05/spring-di-v2/">v2</a>에서 확인해보자~  </p>
<p>참조 블로그 - <a href="http://expert0226.tistory.com/192" rel="external nofollow noopener noreferrer" target="_blank">스프링을 통한 의존성 주입 - XML 파일 사용</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;일반 자바를 가지고 DI를 해본 &lt;a href=&quot;/2017/09/04/di-v3/&quot;&gt;v3&lt;/a&gt;에서는 Car 클래스를 자바 빈즈 스펙을 제대로 준수해서 만들지 않았다.&lt;br&gt;따라서 
    
    </summary>
    
      <category term="Back-end" scheme="http://perfectacle.github.io/categories/Back-end/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/categories/Back-end/Spring/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://perfectacle.github.io/tags/Spring/"/>
    
      <category term="DI" scheme="http://perfectacle.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection(의존성 주입)을 알아보자 - setter</title>
    <link href="http://perfectacle.github.io/2017/09/04/di-v3/"/>
    <id>http://perfectacle.github.io/2017/09/04/di-v3/</id>
    <published>2017-09-03T15:20:46.000Z</published>
    <updated>2017-09-04T16:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<p><a href="/2017/09/04/di-v2/">v2</a>에는 자동차를 생산할 때 어떤 타이어를 만들지 정할 수 있고 새로운 타이어로 교체도 가능했다.<br>하지만 올바른 값이 들어왔는지 유효성 검사할 방법이 없다.<br>사실 변경할 수는 있지만 안전하지 않고 그닥 권장하는 방법이 아니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Tire tire;</div><div class="line">    Car(Tire tire) &#123;</div><div class="line">        <span class="keyword">this</span>.tire = tire;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// setter로 유효성 검사를 위해선 어쩔 수 없이(?) tire를 얻기 위해선 getter를 써야함.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tire;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// setter로 다음과 같이 유효성 검사가 가능해짐.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire</span><span class="params">(Tire tire)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(tire == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">this</span>.tire = tire;</div><div class="line">   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Driver.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        KoreanTire koreanTire = <span class="keyword">new</span> KoreanTire();</div><div class="line">        AmericanTire americanTire = <span class="keyword">new</span> AmericanTire();</div><div class="line">        Car car = <span class="keyword">new</span> Car(koreanTire);</div><div class="line">        car.getTire().wheel(); <span class="comment">// 구르다</span></div><div class="line">        car.setTire(americanTire);</div><div class="line">        car.getTire().wheel(); <span class="comment">// wheel</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>setter를 사용해 좀 더 안전하게(?) 타이어를 교체할 수 있게 되었다.<br>대부분 getter/setter를 사용하는 이유는 아마 다음과 같을 것이다.  </p>
<ol>
<li>자바 빈즈 스펙이기 때문  </li>
<li>유효성 검사나 get 하기 전에 처리할 내용이 있기 때문<br>아마 생각 없이 1번 때문에, 아니면 getter와 setter가 그냥 습관이 된 경우가 대부분일 것이다.<br>순수 자바라면 여기서 끝냈을테지만, 이 방법도 타이어를 교체하려면 계속 컴파일 해야한다는 단점이 있다.<br>스프링으로 이런 자바 빈즈 객체를 XML 파일로 관리해서 DI 하는 방법을 쓰면 컴파일 하지 않고 타이어를 교체할 수 있다.  </li>
</ol>
<p>참조 블로그 - <a href="http://expert0226.tistory.com/191" rel="external nofollow noopener noreferrer" target="_blank">속성을 통한 의존성 주입</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2017/09/04/di-v2/&quot;&gt;v2&lt;/a&gt;에는 자동차를 생산할 때 어떤 타이어를 만들지 정할 수 있고 새로운 타이어로 교체도 가능했다.&lt;br&gt;하지만 올바른 값이
    
    </summary>
    
      <category term="Middle-end" scheme="http://perfectacle.github.io/categories/Middle-end/"/>
    
      <category term="Pattern" scheme="http://perfectacle.github.io/categories/Middle-end/Pattern/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="DI" scheme="http://perfectacle.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection(의존성 주입)을 알아보자 - 생성자 함수</title>
    <link href="http://perfectacle.github.io/2017/09/04/di-v2/"/>
    <id>http://perfectacle.github.io/2017/09/04/di-v2/</id>
    <published>2017-09-03T15:20:46.000Z</published>
    <updated>2017-09-04T16:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<p><a href="/2017/09/04/di-v1/">v1</a>에는 재사용 가능한 코드가 있음에도 불구하고 미묘(?)한 차이 때문에 계속 각국의 타이어를 장착한 자동차 클래스를 만들어야하는 단점이 있었다.<br>이는 자동차를 만들 때 이미 타이어를 만드는 방법이 결정되어 있기 때문에 발생하는 문제이다.<br>(<strong>자동차(전체)</strong>가 <strong>타이어(부분)</strong>에 <strong>의존</strong>하고 있는 코드)<br>즉, 자동차를 만들 때 타이어를 만드는 방법을 결정하면 되는 사항이다.<br>(<strong>의존하는 부분(타이어)</strong>을 <strong>전체(자동차)</strong>에 <strong>주입</strong>시키는 패턴)  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Tire.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tire</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// KoreanTire.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreanTire</span> <span class="keyword">implements</span> <span class="title">Tire</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"구르다"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AmericanTrie.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanTire</span> <span class="keyword">implements</span> <span class="title">Tire</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"wheel"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    Tire tire;</div><div class="line">    Car(Tire tire) &#123; <span class="comment">// 매개변수의 다형성을 사용</span></div><div class="line">        <span class="keyword">this</span>.tire = tire;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        KoreanTire koreanTire = <span class="keyword">new</span> KoreanTire();</div><div class="line">        AmericanTire americanTire = <span class="keyword">new</span> AmericanTire();</div><div class="line">        Car car = <span class="keyword">new</span> Car(koreanTire);</div><div class="line">        car.tire.wheel(); <span class="comment">// 구르다</span></div><div class="line">        </div><div class="line">        car.tire = americanTire;</div><div class="line">        <span class="comment">// 아래와 같은 것도 되니 바로 멤버 변수에 접근해서 설정하는 것은 추천하지 않는다.</span></div><div class="line">        <span class="comment">// car.tire = null;</span></div><div class="line">        car.tire.wheel(); <span class="comment">// wheel</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이렇게 되면 Tire 클래스들만 쭉쭉 추가하면 되고 Car 클래스는 각국 별로 만들 필요가 없어지게 된다.<br>또한 tire 교체도 가능하지만 올바른 값이 들어왔는지 유효성 검사할 방법이 없다.<br>그럼 <a href="/2017/09/04/di-v3/">v3</a>에서는 이러한 문제점을 개선해보도록 하자.</p>
<p>참조 블로그 - <a href="http://expert0226.tistory.com/190" rel="external nofollow noopener noreferrer" target="_blank">생성자를 통한 의존성 주입</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2017/09/04/di-v1/&quot;&gt;v1&lt;/a&gt;에는 재사용 가능한 코드가 있음에도 불구하고 미묘(?)한 차이 때문에 계속 각국의 타이어를 장착한 자동차 클래스를 만들
    
    </summary>
    
      <category term="Middle-end" scheme="http://perfectacle.github.io/categories/Middle-end/"/>
    
      <category term="Pattern" scheme="http://perfectacle.github.io/categories/Middle-end/Pattern/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="DI" scheme="http://perfectacle.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection(의존성 주입)을 알아보자 - 막코딩 하기</title>
    <link href="http://perfectacle.github.io/2017/09/04/di-v1/"/>
    <id>http://perfectacle.github.io/2017/09/04/di-v1/</id>
    <published>2017-09-03T15:05:54.000Z</published>
    <updated>2017-09-04T16:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<p>이 글은 의존성 주입을 전혀 적용하지 않은, 의존성 주입이 뭔지 모르는 상태로 짠 코드이다.<br>우선 문제점을 먼저 파악해봐야 뭐가 되지 않을까 싶어서 막코딩을 해봤다고 가정해보자.<br>우선 미국산 타이어가 장착된 자동차, 한국산 타이어가 장착된 자동차를 만들어야한다고 생각해보자.<br>그럼 우선 미국산, 한국산 타이어 클래스 두 개가 필요할 것이다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// KoreanTire.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreanTire</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"구르다"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AmericanTrie.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanTrie</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"wheel"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>그리고 각각 미국산 타이어를 장착한 자동차, 한국산 타이어를 장착한 자동차 클래스 두 개를 만들면 끝난다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// KoreanCar.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreanCar</span> </span>&#123;</div><div class="line">    KoreanTire koreanTire;</div><div class="line">    KoreanCar() &#123;</div><div class="line">        koreanTire = <span class="keyword">new</span> KoreanTire();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AmericanCar.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCar</span> </span>&#123;</div><div class="line">    AmericanTire AmericanTire;</div><div class="line">    AmericanCar() &#123;</div><div class="line">        AmericanTire = <span class="keyword">new</span> AmericanTire();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>그리고 이제 이 차를 운전할 사람들을 만들어보자.(한국차를 구매한다고 가정)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Driver.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        KoreanCar koreanCar = <span class="keyword">new</span> KoreanCar();</div><div class="line">        koreanCar.koreanTire.wheel(); <span class="comment">// 구르다</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>프로그램은 완성됐고 개발은 끝났다.<br>하지만 영국, 일본, 중국, 태국, 방글라데시, 보스니아 헤르체고비나 등등의 타이어를 장착한 자동차를 만들어야한다면…?<br>클래스는 기하 급수적으로 늘어날 것이고 동일한 코드들이 반복되는데도 불구하고 재사용이 불가능한 코드이므로 계속 자동차, 드라이버 클래스들을 만들어야한다.<br>이런 코드를 보고 유연하지 못하다고 한다. (사교성이 안 좋은 코드이기도 하다 ㅎㅎ…)<br>그럼 <a href="/2017/09/04/di-v2/">v2</a>에서는 이러한 문제점을 개선해보도록 하자.  </p>
<p>참조 블로그 - <a href="http://expert0226.tistory.com/189" rel="external nofollow noopener noreferrer" target="_blank">프로그래밍에서 의존성이란?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 글은 의존성 주입을 전혀 적용하지 않은, 의존성 주입이 뭔지 모르는 상태로 짠 코드이다.&lt;br&gt;우선 문제점을 먼저 파악해봐야 뭐가 되지 않을까 싶어서 막코딩을 해봤다고 가정해보자
    
    </summary>
    
      <category term="Middle-end" scheme="http://perfectacle.github.io/categories/Middle-end/"/>
    
      <category term="Pattern" scheme="http://perfectacle.github.io/categories/Middle-end/Pattern/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="DI" scheme="http://perfectacle.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>(JazzHop) redpest - Sleepy time beats</title>
    <link href="http://perfectacle.github.io/2017/08/28/jazz-hop-sleepy-time-beats/"/>
    <id>http://perfectacle.github.io/2017/08/28/jazz-hop-sleepy-time-beats/</id>
    <published>2017-08-28T13:07:11.000Z</published>
    <updated>2017-08-28T13:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./thumb.jpg" style="display: none"></p>
<iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330637147&amp;color=ff9900&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>

<p>봄의 향그러운 느낌을 한껏 품은 비트다.<br>들으면 잠이 쏟아질 것 같지만 1시간을 넘게 들어도 잠이 안 올 때는 잘 안 온다.  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./thumb.jpg&quot; style=&quot;display: none&quot;&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundc
    
    </summary>
    
      <category term="기타" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="음악" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9D%8C%EC%95%85/"/>
    
    
      <category term="Jazz" scheme="http://perfectacle.github.io/tags/Jazz/"/>
    
      <category term="Hiphop" scheme="http://perfectacle.github.io/tags/Hiphop/"/>
    
      <category term="JazzHop" scheme="http://perfectacle.github.io/tags/JazzHop/"/>
    
      <category term="Lofi" scheme="http://perfectacle.github.io/tags/Lofi/"/>
    
      <category term="Chill" scheme="http://perfectacle.github.io/tags/Chill/"/>
    
      <category term="Sleepy" scheme="http://perfectacle.github.io/tags/Sleepy/"/>
    
  </entry>
  
  <entry>
    <title>자바 vs 자바스크립트</title>
    <link href="http://perfectacle.github.io/2017/08/19/java-vs-javascript/"/>
    <id>http://perfectacle.github.io/2017/08/19/java-vs-javascript/</id>
    <published>2017-08-19T11:43:58.000Z</published>
    <updated>2017-08-28T13:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="">  </p>
<p>이 글은 자바와 자바스크립트를 혼동하는 사람, 차이점이 궁금한 사람 등을 위하여 쓴 글입니다.<br>또한 자바스크립트는 다른 언어에 비해 어떤 단점이 있으며 그 단점들을 어떻게 극복해야할지에 대해 다뤄봤습니다.  </p>
<p>하고 싶은 말 세 줄 요약.  </p>
<ol>
<li>자바스크립트 !== 자바(자바 != 자바스크립트), 자바와 자바스크립트는 같지 않다.<br>두 언어 간에는 접점이 크지 않고, 자바스크립트는 자바의 인기에 편승할 목적(마케팅 목적)으로 이름을 지은 것 뿐입니다.  </li>
<li>자바 커뮤니티 가서 자바스크립트 질문하거나 자바스크립트 커뮤니티 가서 자바 질문을 하는 건 자제해주세요.<br>하지 말라는 건 아닌데 질문자 분께서 원하시는 답(틀린 답을 얻을 수도 있고), 양질의 답을 얻을 가능성, 그리고 빠른 응답을 받기가 힘드실 수 있습니다.  </li>
<li>제발 자바 스크립트(Java Script)라고 적어서 혼란을 초래하지 말아주세요.<br>제발 제발 부탁드립니다. 가끔 보면 화(…)가 날 때도 있습니다.<br>위와 같이 쓰시는 분들 때문에 이런 혼란이 더 초래되는 것 같습니다.<br>새로 배우시는 분들께 잘못된 인식을 심어주는 것도 굉장히 위험하다고 보니 제발 부탁드리겠습니다.</li>
</ol>
<h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul>
<li><a href="#자바스크립트의-어원">자바스크립트의 어원</a>  </li>
<li><a href="#자바스크립트의-탄생-목적">자바스크립트의 탄생 목적</a>  </li>
<li><a href="#자바의-탄생-배경">자바의 탄생 배경</a>  <ul>
<li><a href="#Oak">Oak</a>  </li>
<li><a href="#자바">자바</a>  </li>
</ul>
</li>
<li><a href="#자바스크립트는-인터프리트-언어이다">자바스크립트는 인터프리트 언어이다??</a>  </li>
<li><a href="#자바는-컴파일-언어다">자바는 컴파일 언어다??</a>  </li>
<li><a href="#자바스크립트-언어와-자바의-공통점">자바스크립트 언어와 자바의 공통점??</a>  </li>
<li><a href="#왜-자바스크립트-보고-구리다고-할까">왜 자바스크립트 보고 구리다고 할까??</a>  </li>
<li><a href="#자바스크립트는-멀티-패러다임-언어이다">자바스크립트는 멀티 패러다임 언어이다.</a>  <ul>
<li><a href="#객체-지향-프로그래밍-관점에서의-자바스크립트">객체 지향 프로그래밍 관점에서의 자바스크립트</a>  </li>
<li><a href="#함수형-프로그래밍-관점에서의-자바스크립트">함수형 프로그래밍 관점에서의 자바스크립트</a>  </li>
</ul>
</li>
<li><a href="#자바스크립트는-더-이상-예전의-자바스크립트가-아니다">자바스크립트는 더 이상 예전의 자바스크립트가 아니다.</a>  </li>
<li><a href="#자바스크립트를-배우기-전에-잘-만들어진-프로그래밍-언어를-먼저-배우는-것을-추천하는-이유">자바스크립트를 배우기 전에 잘 만들어진 프로그래밍 언어를 먼저 배우는 것을 추천하는 이유</a>  </li>
</ul>
<h2 id="자바스크립트의-어원"><a href="#자바스크립트의-어원" class="headerlink" title="자바스크립트의 어원"></a>자바스크립트의 어원</h2><p>자바스크립트가 처음 개발할 때부터 자바스크립트였던 건 아니었다.<br>초기에 자바스크립트는 Mocha라는 이름으로 개발되다 추후에 Livescript라는 이름으로 변경되었다.<br>그러다 자바라는 언어가 인기가 많아지자 그 인기에 편승할 목적, 즉 마케팅 목적으로 자바스크립트라는 이름으로 변경 후 세상에 나오게 되었다.<br>당시 자바의 개발사인 썬 마이크로시스템과 자바스크립트의 개발사인 넷 스케이프 사는 ‘자바 라이센스’를 공동으로 소유하고 있어서 이런 일이 가능하였다.  </p>
<h2 id="자바스크립트의-탄생-목적"><a href="#자바스크립트의-탄생-목적" class="headerlink" title="자바스크립트의 탄생 목적"></a>자바스크립트의 탄생 목적</h2><p>해당 언어의 탄생 목적을 보면 어떤 경우에 해당 언어를 써야할지가 명확해진다.<br><img src="yahoo.png" alt="과거 야후의 모습"><br>과거 웹사이트는 사용자와 상호 작용이 불가능했으며, 페이지가 상당히 정적인 모습을 띄었다.<br>따라서 다음과 같은 것들이 불가능하였다.<br><img src="drop.png" alt="사용자가 메뉴에 마우스를 올리면 하위 메뉴가 보이는 드롭다운 메뉴"><br><img src="valid.png" alt="사용자가 입력한 값을 얻어와서 올바른 값을 입력했는지 현재 페이지에서 유효성 검사하기"></p>
<p>자바스크립트의 탄생 목적은 이렇듯 <strong>페이지의 동적 제어</strong>였다.<br>다른 프로그래밍 언어(Java, C 등등)의 경우 <strong>하나의 완성된 프로그램</strong>을 만들 목적으로 만들어진 언어에 비해 그 목적 자체가 달랐다.<br>하지만 자바<strong>스크립트</strong>라는 언어에서 보듯이 자바스크립트는 <strong>스크립트 언어</strong>이다.<br>스크립트 언어는 일반적인 프로그래밍 언어와 달리 하나의 완성된 프로그램보다는 <strong>프로그램 사이에 들어가는, 기존의 프로그램들을 제어하거나 보조하는 용도</strong>로 많이 쓰인다.</p>
<h2 id="자바의-탄생-배경"><a href="#자바의-탄생-배경" class="headerlink" title="자바의 탄생 배경"></a>자바의 탄생 배경</h2><h3 id="Oak-오크"><a href="#Oak-오크" class="headerlink" title="Oak(오크)"></a>Oak(오크)</h3><p>가전제품에 탑재될 소프트웨어를 만들어야해서 C++을 확장해서 사용하려 했지만 C++로는 부적합하였다.<br>따라서 C++의 장점을 도입, 단점을 보완한 Oak라는 언어를 만들게 되었다.<br>Oak는 운영체제에 독립적이라는 장점이 있어 멀티 플랫폼을 지원할 수 있었다.<br>따라서 가전제품이나 PDA와 같은 소형 기기에 탑재될 목적으로 Oak라는 언어를 만들고 있었다.  </p>
<h3 id="자바"><a href="#자바" class="headerlink" title="자바"></a>자바</h3><p>여러 종류의 운영체제를 사용하는 컴퓨터들이 통신하는 인터넷이 등장하자<br>운영체제에 독립적인 Oak가 이에 적합하다고 판단하여 Oak를<br>인터넷에 적합하도록 그 개발 방향을 바꾸면서 이름을 Java로 변경하였다.<br>따라서 백엔드, 서버 쪽 진영을 보면 그렇게 자바를 많이 쓰는 이유가 자바가 <strong>웹에 적합한 언어</strong>이기 때문이다.<br>또한 오래 전 만들어졌기 때문에 안정성과 다양한 커뮤니티가 형성된 것도 한 몫하는 것 같다.</p>
<h2 id="자바스크립트는-인터프리트-언어이다"><a href="#자바스크립트는-인터프리트-언어이다" class="headerlink" title="자바스크립트는 인터프리트 언어이다??"></a>자바스크립트는 인터프리트 언어이다??</h2><p><a href="/2017/08/07/js-jit-compile/">(자알쓰) JIT 컴파일</a>을 참조하자.  </p>
<h2 id="자바는-컴파일-언어다"><a href="#자바는-컴파일-언어다" class="headerlink" title="자바는 컴파일 언어다??"></a>자바는 컴파일 언어다??</h2><p>컴파일하면 소스 코드를 기계어로 변환하는 과정이라고 알고 있는데, 엄밀히 말하면 자바는 소스코드를 기계어로 변환하지 않는다.<br>자바는 소스 코드를 각 자바 바이트 코드로 변환한다.<br>그 이후 JVM(Java Virtual Machine)이 그 자바 바이트 코드를 기계어로 변환한다.<br>즉 실행할 때 마다 매번 자바 바이트 코드를 기계어로 변환하는 JIT 컴파일 방식을 취한다.  </p>
<h2 id="자바스크립트-언어와-자바의-공통점"><a href="#자바스크립트-언어와-자바의-공통점" class="headerlink" title="자바스크립트 언어와 자바의 공통점??"></a>자바스크립트 언어와 자바의 공통점??</h2><p>자바와 자바스크립트가 공통점이 많아서 자바스크립트라고 이름을 붙였다고 주장을 할 수도 있다.<br>하지만 그 정도 공통점은 C와 Java 사이에도 있는 공통점과 같이 다른 프로그래밍 언어 사이에서도 존재하는 프로그래밍 언어라면 가지고 있어야할 당연한 개념들이다.<br>자바스크립트는 하나의 특정 언어보다는 여러 언어 사이에서 다양한 개념을 차용한 언어이다.  </p>
<ul>
<li>자바에서는 문법과 ‘원시 값 vs 객체 관계’  </li>
<li>스키마와 오크에서는 일급 객체인 함수  </li>
<li>셀프에서는 프로토타입 상속  </li>
<li>펄과 파이썬에서는 문자열, 배열, 정규표현식을 빌려왔다.  </li>
</ul>
<h2 id="왜-자바스크립트-보고-구리다고-할까"><a href="#왜-자바스크립트-보고-구리다고-할까" class="headerlink" title="왜 자바스크립트 보고 구리다고 할까??"></a>왜 자바스크립트 보고 구리다고 할까??</h2><p>기존에 다른 프로그래밍 언어(Java, C 등등)을 배웠던 사람은 자바스크립트를 배울 때 매우 어려워한다.<br>개념이 어렵다기 보다는 다른 프로그래밍 언어와 공통된 규칙을 어기는 경우, 당연히 그렇게 동작할 것이라고 생각한 경우를 <strong>배신(?)</strong>한 경우가 많다.<br>그래서 깊은 공부 없이 자바스크립트를 학습 후 <strong>기존의 프로그래밍 언어와 같이</strong> 사용했을 때는 다음과 같은 문제점이 존재한다.  </p>
<ul>
<li>함수 단위의 스코프<br>아래 글도 참고해보자.<br><a href="/2017/04/27/js-003-scope/">(자알쓰) Scope Part. 1</a><br><a href="/2017/05/19/js-004-scope/">(자알쓰) Scope Part. 2</a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 2가 아니라 10</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>기존 프로그래밍 언어에서는 <strong>당연히</strong> 변수의 스코프는 {}블록 단위였다.<br>즉 당연하다고 생각한 변수 스코프를 무심코 썼다간 큰 코 다치기 쉽상이다.<br>이를 위해서는 아래와 같이 작업해야한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Solution #1</span></div><div class="line"><span class="comment">// 변수 이름을 다르게 하기</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>; j&lt;<span class="number">10</span>; j++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(j);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">// Solution #2</span></div><div class="line"><span class="comment">// 즉시 실행 함수(IIFE)를 활용하여 별도의 함수 스코프를 생성</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">&#125;());</div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">// Solution #3</span></div><div class="line"><span class="comment">// ES2015에 도입된 개념인 블록 단위의 스코프를 지원하는 const/let을 사용</span></div><div class="line"><span class="keyword">const</span> i = <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p><strong>하지만 이와 반대로 자바는 블록 단위의 스코프이다.</strong></p>
<ul>
<li>모듈화 미지원<br>아래 글도 참고해보자.<br><a href="/2017/05/20/js-005-module/">(자알쓰) 모듈화 Part. 1</a><br><a href="/2017/05/20/js-006-module/">(자알쓰) 모듈화 Part. 2</a><br><a href="http://d2.naver.com/helloworld/12864" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a><br>자바스크립트의 모든 코드는 전역 스코프를 사용한다.<br>따라서 아래와 같은 경우에는 다음과 같은 문제점이 존재한다.  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">var</span> a = <span class="string">'as'</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">var</span> a = <span class="string">'df'</span>;</div><div class="line"></div><div class="line"><span class="comment">// c.js</span></div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 'd'</span></div></pre></td></tr></table></figure>
<p>스크립트 태그 삽입 순서에 따라 a 값이 바뀌게 되고 a 값의 안정성을 보장할 수 없다.<br>저 값이 어디로 어떻게 튈지 몰라서 에러를 유발하는 코드가 될 수도 있다.<br>만약 누군가가 a에 3이라는 값을 넣었으면 3은 숫자이고 인덱스로 접근이 불가능하니 오류가 나기 마련이다.<br>따라서 다음과 같이 해결해야한다.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Solution #1</span></div><div class="line"><span class="comment">// 네임스페이스 패턴을 활용하기</span></div><div class="line"></div><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">var</span> a = a || &#123;&#125;;</div><div class="line">a.a = <span class="string">'as'</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">var</span> b = b || &#123;&#125;;</div><div class="line">b.a = <span class="string">'df'</span>;</div><div class="line"></div><div class="line"><span class="comment">// c.js</span></div><div class="line"><span class="built_in">console</span>.log(a.a[<span class="number">0</span>]); <span class="comment">// 'a'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Solution #2</span></div><div class="line"><span class="comment">// ES2015의 모듈 문법인 import/export Syntax 사용하기</span></div><div class="line"><span class="comment">// 지원하는 브라우저/Node가 없으므로 Webpack 등등의 Module Bundler의 사용이 필수적임.</span></div><div class="line"></div><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">'as'</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">'df'</span>;</div><div class="line"></div><div class="line"><span class="comment">// c.js</span></div><div class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'a.js'</span>;</div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 'a'</span></div><div class="line"></div><div class="line"><span class="comment">// Solution #3</span></div><div class="line"><span class="comment">// Node.js에서는 CommonJS 방식으로 모듈화를 구현할 수 있음.</span></div><div class="line"></div><div class="line"><span class="comment">// a.js</span></div><div class="line">exports.a = <span class="string">'as'</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line">exports.a = <span class="string">'df'</span>;</div><div class="line"></div><div class="line"><span class="comment">// c.js</span></div><div class="line"><span class="keyword">const</span> &#123;a&#125; = <span class="built_in">require</span>(<span class="string">'a.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 'a'</span></div><div class="line"></div><div class="line"><span class="comment">// Solution #4</span></div><div class="line"><span class="comment">// 브라우저에서는 모든 파일을 다운로드 받아야한다는 특수성 때문에 비동기로 모듈을 로딩해야한다.  </span></div><div class="line"><span class="comment">// 이를 위한 모듈화 방법으로는 AMD 방식이 있으며 이를 구현한 라이브러리는 RequireJS가 있다.  </span></div><div class="line"><span class="comment">// http://requirejs.org 를 참조하자.</span></div></pre></td></tr></table></figure>
<p>1번 솔루션인 네임스페이스 패턴은 전역 스코프를 더럽힌다는 단점(전역 스코프에 변수 a와 b가 두둥실 떠다니게 됨.)이 존재한다.<br>외부에서 참조하려면 어쩔 수 없이 전역 스코프에서 모듈을 구현해야하지만 외부에서 참조할 일 없는 변수는<br>자바스크립트의 함수 단위의 스코프를 활용한 즉시 실행 함수 패턴(IIFE, Immediately Invoked Function Expressions)를 사용하면 된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="built_in">console</span>.log(a);</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// Uncaught ReferenceError: a is not defined</span></div><div class="line">&#125;());</div></pre></td></tr></table></figure></p>
<p>즉 a.js와 b.js는 서로 다른 스코프를 가지게 된다는 의미이고 전역 스코프가 아닌 로컬 스코프(함수는 별도의 스코프를 형성하므로)를 사용하게 되는 격이다.<br>위에서 보이는 문제점들은 전부 스코프가 너무 넓다는 문제점들이다.<br>스코프가 너무 넓으면 여러 곳에서 접근이 가능하고, 여러곳에서 접근이 가능하다는 소리는 내가 작성한 코드를 다른 개발자가 쉽게 수정이 가능하단 뜻이며<br>그 코드로 인해 프로그램이 뻗을 수도 있으므로 스코프는 좁은 것이 최대한 코드의 안정성을 보장할 수 있는 길이라고 할 수 있을 것 같다.</p>
<p><strong>하지만 자바에서는 모듈화를 클래스나 패키지를 통해 구현할 수 있는 것으로 알고 있다.</strong>  </p>
<ul>
<li>호이스팅<br><a href="/2017/04/26/js-002-hoisting/">(자알쓰) Hoisting</a>을 참고하자.<br><strong>자바에서는 호이스팅이란 개념이 존재하지 않는다.</strong><br>&nbsp;</li>
<li>동적 타입<br>자바스크립트는 기본적으로 변수를 만들 때 변수의 타입을 지정하지 않는다.<br>따라서 해당 변수에는 문자열이 담겼다가 숫자가 담길 수도 있다.<br>처음에는 이러한 유연함 때문에 변수의 타입을 생각하지 않고 코딩하기 때문에 코딩이 더 빨리 되는 것 같아서 좋다.<br>하지만 몇 달 후, 내가 짠 코드도 보기 이해하기 힘든데 남이 짠 코드를 유지보수 해야하는 경우,<br>혹은 앱의 규모가 대규모로 커지는 경우에는 과연 변수에 어떤 값이 담겼는지 잘 알아낼 수 있을까??  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 3개월 전에 작성한 util.js</span></div><div class="line"><span class="keyword">var</span> util = util || &#123;&#125;;</div><div class="line">util.a = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> +a; <span class="comment">// 숫자로 변환하여 반환</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3개월 후에 내가 수정하거나 작성해야할 app.js</span></div><div class="line"><span class="keyword">var</span> b = util.a(<span class="string">'aa'</span>);</div><div class="line"><span class="comment">// 나는 util.a의 결과가 배열인 줄 알고 splice 메소드를 썼다.</span></div><div class="line"><span class="comment">// 하지만 util.a의 결과는 숫자이고 숫자에는 splice 메소드가 존재하지 않으니 에러가 뜰 것이다.</span></div><div class="line"><span class="comment">// 만약 정적 타입 언어였다면 util.a의 반환값이 숫자인 것을 알고 당연히 에러라고 에디터에 밑줄을 그어줄테지만</span></div><div class="line"><span class="comment">// 변수의 타입이 존재하지 않는 자바스크립트 같은 경우에는 실행했을 때만, 즉 런타임 시에만 오류를 알 수 있다는 단점이 존재한다.</span></div><div class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">0</span>));</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>자바는 정적 타입의 언어, 즉 변수를 생성할 때 어떤 타입의 변수인지 선언해야하고 죽었다 깨어나도 변수의 타입은 바뀌지 않는다.</strong></p>
<ul>
<li>var 없이 변수 선언하기<br>이런 코드 보면 조금 극혐하는 편이다.<br>스코프는 좁을 수록 코드가 안전해진다고 알고 있는데 오히려 스코프를 넓히는 코딩 패턴이다.<br>다음 코드를 살펴보자.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 변수 a를 var 없이 선언했다.</span></div><div class="line">  <span class="comment">// 일단 현재 스코프에 변수 a가 없으므로 상위 스코프로 이동한다.</span></div><div class="line">  <span class="comment">// 그리고 그 스코프에 존재하는 변수 a의 값을 재할당한다.</span></div><div class="line">  a = <span class="number">3</span>;</div><div class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 변수 b를 var 없이 선언했다.</span></div><div class="line">    <span class="comment">// 일단 현재 스코프에 변수 b가 없으므로 상위 스코프로 이동한다.</span></div><div class="line">    <span class="comment">// 그리고 그 스코프에 존재하는 변수 b의 값을 재할당한다.</span></div><div class="line">    b = <span class="number">2</span>;</div><div class="line">  &#125;;</div><div class="line">  b();</div><div class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 함수 b 실행 이후 b는 더이상 함수가 아닌 숫자 2이다.</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</div><div class="line">a();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 함수 a 실행 이후 a는 더이상 함수가 아닌 숫자 3이다.</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 얘는 3 그대로이다.</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>어떤 글들을 보면 var 없으면 전역에 변수를 생성한다고 하는데 그게 아니라 스코프 하나씩 위로 타고 올라가서 있는지 없는지 파악 후<br>해당 변수가 존재하는 스코프(없으면 전역까지 가서 생성)에 변수를 재할당 하는 것이다.<br>여튼 이런 실수를 방지하려면 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode" rel="external nofollow noopener noreferrer" target="_blank">Strict Mode</a>를 무조건 사용하자.<br>ES2015+라면 Strict Mode를 사용할 필요가 없다.</p>
<p><strong>자바는 이렇게 변수를 생성하는 키워드를 생략해서 변수를 생성할 수 없다.</strong></p>
<h2 id="자바스크립트는-멀티-패러다임-언어이다"><a href="#자바스크립트는-멀티-패러다임-언어이다" class="headerlink" title="자바스크립트는 멀티 패러다임 언어이다."></a>자바스크립트는 멀티 패러다임 언어이다.</h2><p>자바스크립트는 여러 언어로부터 개념을 빌려온 언어이다.<br>셀프에서는 프로토타입 상속 개념을 빌려왔기 때문에 객체 지향 언어에서 말하는 상속의 개념도 구현할 수 있다.<br>따라서 자바스크립트는 <strong>객체 지향 프로그래밍</strong>이 가능하다.<br>또한 스키마와 오크에서는 <a href="/2017/06/30/js-func-00-what/#일급-함수-일급-객체-일급-시민">일급 객체</a>인 함수 개념을 빌려왔기 때문에 <strong>함수형 프로그래밍</strong>도 가능하다.</p>
<h3 id="객체-지향-프로그래밍-관점에서의-자바스크립트"><a href="#객체-지향-프로그래밍-관점에서의-자바스크립트" class="headerlink" title="객체 지향 프로그래밍 관점에서의 자바스크립트"></a>객체 지향 프로그래밍 관점에서의 자바스크립트</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Parent = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line">Parent.prototype.sayMyName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Child = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</div><div class="line">  <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</div><div class="line">  Parent.call(<span class="keyword">this</span>, name); <span class="comment">// 부모의 생성자 함수 호출</span></div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child(<span class="string">'양권성'</span>, <span class="number">99</span>);</div><div class="line">c.sayMyName(); <span class="comment">// '양권성'</span></div></pre></td></tr></table></figure>
<p>하지만 이마저도 다음과 같은 문제점이 존재한다.<br>여기서 말하는 멤버는 변수+메소드를 뜻한다.</p>
<ul>
<li><p>static 멤버가 존재하지 않는다.<br>인스턴스(객체)를 생성하기 이전에 사용 가능한 static 멤버가 존재하지 않는다.<br>ES2015의 class syntax(말이 class지, 그 내부를 들여다보면 여전히 함수를 통해 객체를 생성하고 있다.)가 도입되면서 static 멤버의 사용도 가능해졌다.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Person = <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> sayHello() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// static 변수는 아직 Stage-2 단계이다.</span></div><div class="line">  <span class="comment">// static b = 'b';</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.sayHello(); <span class="comment">// hello</span></div></pre></td></tr></table></figure>
</li>
<li><p>private 멤버를 만들지 못한다.<br>private 멤버가 없다면 아래와 같은 문제점들이 존재하게 된다.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</div><div class="line">  <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="literal">null</span>); <span class="comment">// 정상적으로 오류를 뿜어냄.</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="number">25</span>);</div><div class="line">p2.age = <span class="literal">null</span>; <span class="comment">// age를 재할당 했을 때는 오류를 잡아낼 수가 없음.</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>이를 위해서는 ES2015의 class, 유일한 값을 만들어내는 Symbol, 외부에서 접근 불가능한 별도의 스코프를 만들어냄과 동시에 실행하는 즉시 실행 함수 패턴,<br>내부 스코프에 있는 변수(private 변수)들을 접근하기 위해 클로저 사용, private 변수들에 대한 유효성 검사(?)를 위한 getter/setter 메소드가 사용되었다.<br>사실 Reflect.ownKeys나 Object.getOwnPropertySymbols를 이용하면 Symbol로 만든 private 변수에 접근이 가능하지만,<br>private 접근 지정자가 존재하는 자바에도 Reflect를 사용하면 <a href="http://hiddenviewer.tistory.com/115" rel="external nofollow noopener noreferrer" target="_blank">Private Filed에 접근하기</a>가 가능하다고 한다.<br>Reflect를 사용 했을 때도 private 멤버들을 숨기고 싶다면 <a href="https://gomugom.github.io/how-to-make-private-member/" rel="external nofollow noopener noreferrer" target="_blank">ES6 Class에서 private member를 정의하는 방법</a>를 참조하자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Person = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 즉시 실행 함수 패턴을 사용하여 별도의 스코프를 생성함과 동시에 함수를 실행.</span></div><div class="line">  <span class="comment">// 리턴문 밖에 있는 애들은 getter와 setter를 제외하고는 직접적인 접근이 불가능해서 private이라고 말할 수 있음.</span></div><div class="line">  <span class="comment">// 클로저를 사용한 것임.</span></div><div class="line">  <span class="keyword">const</span> _name = <span class="built_in">Symbol</span>(<span class="string">'name'</span>);</div><div class="line">  <span class="keyword">const</span> _age = <span class="built_in">Symbol</span>(<span class="string">'age'</span>);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, age) &#123;</div><div class="line">      <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</div><div class="line">      <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</div><div class="line">      <span class="keyword">this</span>[_name] = name;</div><div class="line">      <span class="keyword">this</span>[_age] = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    get name() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>[_name];</div><div class="line">    &#125;</div><div class="line">    set name(name) &#123;</div><div class="line">      <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</div><div class="line">      <span class="keyword">this</span>[_name] = name;</div><div class="line">    &#125;</div><div class="line">    get age() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>[_age];</div><div class="line">    &#125;</div><div class="line">    set age(age) &#123;</div><div class="line">      <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</div><div class="line">      <span class="keyword">this</span>[_age] = age;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="literal">null</span>); <span class="comment">// 정상적으로 오류를 뿜어냄.</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="number">25</span>);</div><div class="line">p2.age = <span class="literal">null</span>; <span class="comment">// age를 재할당 했을 때 또한 오류를 잡아냄.</span></div><div class="line"></div><div class="line"><span class="comment">// 아래 방법으로 private 멤버에 접근이 가능하긴 하다.</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(p2));</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(p2));</div></pre></td></tr></table></figure></p>
<p><strong>자바는 이런 static 멤버, private 접근 지정자, 메소드 오버라이딩, 오버로딩 등등과 같이 자바스크립트에서 지원하는 것은 물론 지원하지 않는 객체 지향 개념들도 모두 지원하고 있는 언어이다.</strong></p>
<h3 id="함수형-프로그래밍-관점에서의-자바스크립트"><a href="#함수형-프로그래밍-관점에서의-자바스크립트" class="headerlink" title="함수형 프로그래밍 관점에서의 자바스크립트"></a>함수형 프로그래밍 관점에서의 자바스크립트</h3><p>두말하면 입아프니 <a href="/2017/06/30/js-func-00-what/">함수형 프로그래밍(JS)이란…?</a>을 참고하자.<br><strong>자바에서는 자바8에 Lambda가 출현한 이후 함수형 프로그래밍이 가능해졌는지 모르겠지만 그 이전에는 불가능한 것으로 알고 있다.<br>왜냐하면 자바에서는 함수가 일급 객체가 아니기 때문에 함수의 매개변수로 넘길 수 없기 때문이다.</strong></p>
<h2 id="자바스크립트는-더-이상-예전의-자바스크립트가-아니다"><a href="#자바스크립트는-더-이상-예전의-자바스크립트가-아니다" class="headerlink" title="자바스크립트는 더 이상 예전의 자바스크립트가 아니다."></a>자바스크립트는 더 이상 예전의 자바스크립트가 아니다.</h2><p>예전에 자스의 출현 목적은 페이지의 동적 제어였지만 <a href="/2017/06/18/what-is-node-js/">브라우저를 탈출한 JS(Node.js)</a>의 출현과 <a href="/2017/04/26/js-001-es/#ES2015-ES6">ES2015의 탄생</a> 이후로<br><strong>이런 걸 자바스크립트로 할 수 있다고??</strong>와 같은 걸 많이 할 수 있게 되었다.  </p>
<ol>
<li>서버 구현(Node.js)  </li>
<li>파일 읽고 쓰기(Node.js)  </li>
<li>CLI 프로그램 만들기 (예) babel, webpack 등등)  </li>
<li>모바일 앱 만들기(Ionic2, React Native)  </li>
<li>데스크탑 앱 만들기(Electron)  </li>
<li>크롤링 하기(PhantomJS, JSDom 등등)  </li>
<li>기타 등등</li>
</ol>
<p>이제 자바스크립트는 어엿한 프로그래밍 언어의 반열에 올랐다고 볼 수 있고, 그 목적도 이제 페이지의 동적 제어에 벗어나서 <a href="/2017/08/08/js-how-to-learn/">프로그래밍 언어 관점으로 바라보고 학습할 자세</a>가 필요하다.</p>
<h2 id="자바스크립트를-배우기-전에-잘-만들어진-프로그래밍-언어를-먼저-배우는-것을-추천하는-이유"><a href="#자바스크립트를-배우기-전에-잘-만들어진-프로그래밍-언어를-먼저-배우는-것을-추천하는-이유" class="headerlink" title="자바스크립트를 배우기 전에 잘 만들어진 프로그래밍 언어를 먼저 배우는 것을 추천하는 이유"></a>자바스크립트를 배우기 전에 잘 만들어진 프로그래밍 언어를 먼저 배우는 것을 추천하는 이유</h2><p>ES2015의 출현으로 자바스크립트의 많은 단점들이 보완됐지만 여전히 단점들(동적 타입, 인터페이스의 부재, 다른 언어의 좋은 개념들 등등)이 존재한다.<br>ES5 시절에는 아주 홍수 같이 많았다.(호이스팅, 모듈화, 함수단위 스코프 등등)<br>이런 문제점은 누가 짚어주지 않는 이상 모르는 경우가 허다하다.<br>하지만 만약 자바나 C 같은 이런 단점들이 존재하지 않는 언어들을 먼저 배웠다면  </p>
<blockquote>
<blockquote>
<p>어? 동적 타입 언어네? 정적 타입으로 도와주는 라이브러리가 없나?<br>모듈화는 어떻게 구현해야할까?</p>
</blockquote>
</blockquote>
<p>등등과 같은 고민들을 누가 말해주지 않더라도 혼자서라도 해볼 가능성이 조금이라도 올라가며 누군가 설명을 해주면 쉽게 이해가 가능하다.<br>또한 자바 등등과 같이 잘 만들어지지 않은 언어를 배우지 않다보면 캡슐화, private 멤버의 필요성을 느낄 수가 없게 된다.<br>정통 프로그래밍 언어를 배웠다면 이게 없으면 당연히 문제라고 생각해볼만한 개념들이 자바스크립트에는 상당히 많다.<br>물론 그 배경에는 짧은 개발 기간과 페이지 동적 제어라는 목적 때문이었겠지만…  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;이 글은 자바와 자바스크립트를 혼동하는 사람, 차이점이 궁금한 사람 등을 위하여 쓴 글입니다.&lt;br&gt;또한 자바스크립트는 다른 언어에 비해 어떤 단점이 있으며 그 단점들을 어떻게 
    
    </summary>
    
      <category term="Programming" scheme="http://perfectacle.github.io/categories/Programming/"/>
    
      <category term="ECMAScript" scheme="http://perfectacle.github.io/categories/Programming/ECMAScript/"/>
    
    
      <category term="Java" scheme="http://perfectacle.github.io/tags/Java/"/>
    
      <category term="JS" scheme="http://perfectacle.github.io/tags/JS/"/>
    
      <category term="ES" scheme="http://perfectacle.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트 학습 방법</title>
    <link href="http://perfectacle.github.io/2017/08/08/js-how-to-learn/"/>
    <id>http://perfectacle.github.io/2017/08/08/js-how-to-learn/</id>
    <published>2017-08-08T12:30:06.000Z</published>
    <updated>2017-08-09T09:16:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<p>이 포스트는 제가 다년간 자바스크립트를 설렁 설렁 공부하다 작년 1년동안 빡시게 공부해온 경험을 토대로 작성한 글입니다.<br>따라서 이 글을 읽으시는 분들께서는 본인과 맞지 않는 부분도 존재할 수 있으니 그 점은 참고하고 적절한 필터링을 하시면 되겠습니다.  </p>
<h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul>
<li><a href="#들어가기에-앞서">들어가기에 앞서</a>  <ul>
<li><a href="#역사를-먼저-알아보자">역사를 먼저 알아보자</a></li>
<li><a href="#자바스크립트는-자바가-아니다">자바스크립트는 자바가 아니다</a>  </li>
<li><a href="#HTML-CSS의-연장선-상으로-자바스크립트를-바라보지-말자">HTML, CSS의 연장선 상으로 자바스크립트를 바라보지 말자</a>  </li>
<li><a href="#JS를-브라우저와-떼놓고-생각하자">JS를 브라우저와 떼놓고 생각하자</a>  </li>
<li><a href="#JS는-더이상-Toy-Language-장난감-가지고-놀듯-쉽고-깊이-없이-배워도-되는-언어-가-아니다">JS는 더이상 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니다.</a>  </li>
</ul>
</li>
<li><a href="#어떻게-공부해야할까">어떻게 공부해야할까?</a><ul>
<li><a href="#1-잘-만들어졌다고-알려진-언어들을-먼저-공부하자">1. 잘 만들어졌다고 알려진 언어들을 먼저 공부하자</a>  <ul>
<li><a href="#1-1-그게-싫다면-쉽게-쉽게-쓰여진-책을-먼저-읽자">1-1. 그게 싫다면 쉽게 쉽게 쓰여진 책을 먼저 읽자</a>  </li>
</ul>
</li>
<li><a href="#2-소문난-책들을-위주로-읽자-단-jQuery-빼고">2. 소문난 책들을 위주로 읽자, 단 jQuery 빼고</a>  <ul>
<li><a href="#2-1-MDN-Stackoverflow와-친해지자">2-1. MDN, Stackoverflow와 친해지자</a>  </li>
<li><a href="#2-2-ES5를-끝내고-ES2015-를-할-필요가-없다">2-2. ES5를 끝내고 ES2015+를 할 필요가 없다</a>  </li>
</ul>
</li>
<li><a href="#3-NPM과-Babel을-배우자">3. NPM과 Babel을 배우자</a>  </li>
<li><a href="#4-ES2015-가-익숙해졌다면-Typescript를-공부해보자">4. ES2015+가 익숙해졌다면 Typescript를 공부해보자</a>  </li>
</ul>
</li>
<li><a href="#번외편">번외편</a><ul>
<li><a href="#1-코드-검사-도구를-사용하자">1. 코드 검사 도구를 사용하자.</a>  </li>
<li><a href="#2-Task-Runner를-배우자">2. Task Runner를 배우자</a>  </li>
<li><a href="#3-Module-Bundler를-배우자">3. Module Bundler를 배우자</a>  </li>
<li><a href="#4-TDD를-공부하자">4. TDD를 공부하자</a>  </li>
</ul>
</li>
<li><a href="#마치며">마치며</a></li>
</ul>
<h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>먼저 들입다 자바스크립트 공부를 하지 말고 아래 내가 열거한 사항들을 먼저 보고 공부를 해보자.<br>나의 다년간의 노하우가 녹아있으니 쏙쏙 빼먹길 바란다.<br>이러한 노하우들을 보고 실제 자바스크립트를 <a href="#어떻게-공부해야할까">어떻게 공부해야할지</a>에 대해 알아보자.<br>또한 에이전시/쇼핑몰에 종사하는 분들은 ES2015+를 실무에서 접할 기회가 적기 때문에 <a href="#2-1-MDN-Stackoverflow와-친해지자">2-1. MDN, Stackoverflow와 친해지자</a> 파트까지만 공부해도 실무에서는 전혀 무리가 없을 것이다.<br>하지만 스타트업, 자사 서비스/대규모 JS 앱을 개발하는 환경에 종사하는 분들은 ES2015+를 실무에서 매우 빈번하게 사용하고 있을 것이므로 그 이후 챕터까지 모두 공부하는 걸 추천한다.  </p>
<h3 id="역사를-먼저-알아보자"><a href="#역사를-먼저-알아보자" class="headerlink" title="역사를 먼저 알아보자"></a>역사를 먼저 알아보자</h3><p>해당 프로그래밍 언어가 어떤 문제를 해결하기 위해 나왔는지 등등에 대해 파악을 하게 되면 좀 더 해당 언어를 잘 쓸 수 있게 된다.<br>먼저 초기 브라우저에는 페이지를 보여주기만 할 뿐, 유저와 상호작용을 하지 못했다.<br>유저가 값을 입력하는게 불가능하다보니 그에 대한 응답도 불가능했던 것이다.<br>따라서 페이지의 <strong>동적인 처리</strong>를 위해서 자바스크립트가 나왔다고 해도 과언이 아니다.<br>당시에 자바스크립트는 하나의 프로그램을 만드는 목적 보다도 <strong>ID에 공백을 넣은 경우, 메뉴에 마우스를 올린 경우</strong> 등등의 동적인 처리가 주된 목적이었다.<br>따라서 하나의 완성된 프로그램을 만들기에는 다소 부족한 점도 많았고, 10일이라는 짧은 개발 시간 탓에 설계 상 버그 등등이 많다.<br>이러한 점들은 <a href="/categories/Programming/ECMAScript/자알쓰/">자알쓰</a>에서 하나하나 정리하고 있으니 해당 포스트를 참고해보자.</p>
<h3 id="자바스크립트는-자바가-아니다"><a href="#자바스크립트는-자바가-아니다" class="headerlink" title="자바스크립트는 자바가 아니다"></a>자바스크립트는 자바가 아니다</h3><p>가끔 보면 자바스크립트 커뮤니티에 자바 질문을 올리는 사람들이 있다.<br><strong>자바 스크립트(Java Script)가 아니라 자바스크립트(Javascript)다.</strong> 둘은 엄연히 다르다.<br>왜 이런 이름이 붙었는지에 대해서 간단히 알아보자.<br>자바스크립트의 이름의 변천사는 모카(Mocha) - 라이브스크립트(Livescript) - 자바스크립트(Javascript)이다.<br>자바스크립트는 다음과 같은 언어에서 영향을 받았다.  </p>
<ul>
<li>자바에서는 문법과 ‘원시 값 vs 객체 관계’  </li>
<li>스키마와 오크에서는 일급 객체인 함수  </li>
<li>셀프에서는 프로토타입 상속  </li>
<li>펄과 파이썬에서는 문자열, 배열, 정규표현식을 빌려왔다.  </li>
<li>또한 워낙 여러 언어로부터 영향을 받은 덕에 함수형 프로그래밍(일급 객체인 함수)과 객체지향 프로그래밍(객체, 상속)을 함께 사용하곤 한다.</li>
</ul>
<p>따라서 자바스크립트는 자바와 직접적인 연관 관계가 커서 그렇게 이름이 붙은 게 아니라 자바의 인기에 탑승하려는 <del>노이즈</del><strong>마케팅 전략</strong>을 사용한 게 아닐까 싶다.  </p>
<h3 id="HTML-CSS의-연장선-상으로-자바스크립트를-바라보지-말자"><a href="#HTML-CSS의-연장선-상으로-자바스크립트를-바라보지-말자" class="headerlink" title="HTML, CSS의 연장선 상으로 자바스크립트를 바라보지 말자"></a>HTML, CSS의 연장선 상으로 자바스크립트를 바라보지 말자</h3><p>많은 사람들이 HTML, CSS를 배우고 그 이후에 홈페이지를 <strong>동적</strong>으로 제어할 목적으로 자바스크립트를 배운다.<br>자바스크립트는 <strong>프로그래밍 언어</strong>이다.<br>C언어와 같은 프로그래밍 언어를 배운다고 하면 C언어를 배우지 그 전에 컴퓨터 사이언스를 <strong>굳이</strong> 배우고 시작할 필요는 없다.<br>배우면 좋지만 배우지 않고 시작해도 상관이 없다는 뜻이다.<br>즉, 그 말은 병행해도 된다는 뜻이며 HTML을 배우지 않고 JS를 먼저 배워도 된다는 뜻이다.  </p>
<h3 id="JS를-브라우저와-떼놓고-생각하자"><a href="#JS를-브라우저와-떼놓고-생각하자" class="headerlink" title="JS를 브라우저와 떼놓고 생각하자"></a>JS를 브라우저와 떼놓고 생각하자</h3><p>브라우저에서 제공하는 JS는 크게 세 파트로 나눌 수가 있다.  </p>
<ol>
<li>DOM(Document Object Model)<br>자바스크립트에 자주 사용하는 <code>document.getElementById()</code>와 같이 <strong>document 객체</strong>에 해당하는 내용들을 지칭한다.  </li>
<li>BOM(Browser Object Model)<br>자바스크립트에서 자주 사용하는 <code>window.alert()</code>와 같이 <strong>window 객체</strong>에 해당하는 내용들을 지칭한다.  </li>
<li><a href="/2017/04/26/js-001-es/">ES(ECMAScript)</a></li>
</ol>
<p>오잉? 브라우저에서 제공하는 JS? 그럼 다른 곳에서도 JS를 쓸 수 있단 말인가?<br>그렇다. <a href="/2017/06/18/what-is-node-js/">Node.js</a>에서도 JS를 쓸 수 있으며 브라우저에서는 할 수 없었던 여러가지를 할 수 있게 되었다.  </p>
<ol>
<li>File I/O<br>파일의 입/출력과 관련된 내용이다.  </li>
<li>서버 API<br>서버를 구축하는 것 등등에 관한 내용이다.</li>
<li>ES(ECMAScript)  </li>
<li>기타 등등 너무 많음.</li>
</ol>
<p>따라서 우리는 먼저 ES를 마스터해야한다.<br>Node.js와 Browser라는 플랫폼에서 공통적으로 쓸 수 있는 내용이기도 하며 ES에 해당하는 내용들이<br>여타 프로그래밍 언어들(C, Java 등등)이 가지고 있어야할 내용들(변수, 함수, 자료형, 조건문, 반복문 등등)이 포함된 내용이기 때문에<br>프로그래밍 언어 관점에서 자바스크립트를 배우려면 ES를 먼저 파야한다.  </p>
<p>자바스크립트를 브라우저와 절친 먹여놓고 공부하기 시작하다보면 다음과 같은 함정에 빠지게 된다.<br>일반적인 수학에서 함수는 <strong>입력 값이 있으면 출력 값이 있다</strong>라는 개념이다.<br>프로그래밍 세계에서 함수의 <strong>입력 값은 매개변수, 출력 값은 반환하는 값</strong>과 연결이 된다.<br>따라서 <strong>두 수의 합을 반환하는 함수</strong>를 만들라고 하면 다양한 결과가 나오게 된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 아래 두 케이스가 모범 답안</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x+y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x+y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 결과를 확인하려고자 하는 의지</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add3</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x+y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 브라우저와 짱친 먹은 JS들</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add4</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  alert(x+y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add5</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.body.innerHTML += x+y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add6</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(prompt(<span class="string">"숫자를 입력해주세요."</span>));</div><div class="line">  <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(prompt(<span class="string">"숫자를 입력해주세요."</span>));</div><div class="line">  <span class="built_in">document</span>.body.innerHTML += x+y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>사람들이 <strong>입력</strong>이라고 하면 어느 정도는 함수의 <strong>매개변수</strong>로 이해를 하는 경향이 있다.(일부는 prompt 함수로 입력받는다.)<br>하지만 <strong>반환</strong>의 의미를 <strong>(화면에)출력</strong>으로 받아들이는 경우도 존재하고, 그 화면에 출력하는 방법도 로그창, 경고창, 브라우저에 보여주는 방법 등이 존재한다.<br>이는 모두 브라우저에 <strong>의존</strong>하고 있는 것이다.  </p>
<h3 id="JS는-더이상-Toy-Language-장난감-가지고-놀듯-쉽고-깊이-없이-배워도-되는-언어-가-아니다"><a href="#JS는-더이상-Toy-Language-장난감-가지고-놀듯-쉽고-깊이-없이-배워도-되는-언어-가-아니다" class="headerlink" title="JS는 더이상 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니다."></a>JS는 더이상 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니다.</h3><p>과거에 어쨌든 간에 현재 자바스크립트는 계속해서 새로운 스펙이 나오고 이제 어엿한 프로그래밍 언어의 반열에 올랐다고 할 수 있다.<br>여전히 동적 타입, typeof 버그 등등의 단점이 존재하지만 이전 자바스크립트 버전으로 작성한 코드와의 호환 때문에 고칠 수 없는 점도 존재해서 여전히 문제는 존재한다.<br>하지만 예전의 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니란 뜻이며 진지하고 깊숙하게 시간을 내서 배울 가치가 있는 언어이다.</p>
<h2 id="어떻게-공부해야할까"><a href="#어떻게-공부해야할까" class="headerlink" title="어떻게 공부해야할까?"></a>어떻게 공부해야할까?</h2><p>아직 <a href="#들어가기에-앞서">들어가기에 앞서</a>를 보지 않았다면 꼭 보고 오자.<br>공부에 임하기 전에 자바스크립트를 어떠한 자세로 바라보고 공부해야할지에 대해 적어놓았다.<br>이제 본격적으로 자바스크립트를 어떻게 정복해야할지 스텝 바이 스텝으로 적어보겠다.  </p>
<h3 id="1-잘-만들어졌다고-알려진-언어들을-먼저-공부하자"><a href="#1-잘-만들어졌다고-알려진-언어들을-먼저-공부하자" class="headerlink" title="1. 잘 만들어졌다고 알려진 언어들을 먼저 공부하자"></a>1. 잘 만들어졌다고 알려진 언어들을 먼저 공부하자</h3><p>사람은 아는만큼 보인다.<br>자바스크립트는 애초에 목적 자체가 프로그램을 만들기 보다는 <strong>페이지의 동적 제어</strong>였고, <strong>10일이라는 짧은 개발 기간</strong> 덕분에 설계 상 문제점이 많은 언어이다.<br>이걸 다른 프로그래밍 언어를 모르는 사람은 그 설계 사항들이 왜 안 좋고 어떤 문제점들이 존재하는지 모른다.<br>그런 걸 친절하게 일일이 다 설명해주는 책이 있으면 모르겠지만 없었던 것 같고, 다 인터넷을 통해 파편화된 지식을 조각 조각 모아야했던 것 같다.<br>혹은 너무 어렵게 설명이 돼있거나…<br>하지만 잘 만들어졌다고 알려진 C나 Java와 같은 언어(동의를 안 하더라도 확실히 예전의 JS보다는 잘 만들어졌다는 데는 동의할 것이다.)를 먼저 공부하고 자바스크립트를 바라보면<br><strong>이거 왜 이렇게 만들었어?, 이렇게 짜면 이런 사항들이 문제가 되겠는데?, 예전에 봤을 때는 못 알아 먹겠는 것들이 이제는 조금씩 보이네?</strong>하고 동일한 내용을 보아도 이해하는 관점이 깊이가 깊어진다.<br>따라서 나는 자바스크립트를 접하기 전에 그런 언어들을 먼저 접하는 걸 추천한다.  </p>
<h4 id="1-1-그게-싫다면-쉽게-쉽게-쓰여진-책을-먼저-읽자"><a href="#1-1-그게-싫다면-쉽게-쉽게-쓰여진-책을-먼저-읽자" class="headerlink" title="1-1. 그게 싫다면 쉽게 쉽게 쓰여진 책을 먼저 읽자"></a>1-1. 그게 싫다면 쉽게 쉽게 쓰여진 책을 먼저 읽자</h4><p>나는 시간이 별로 없거니와 C언어와 Java는 너무 어렵다(<del>알레르기가 있다</del>)고 생각되는 사람들은 사람들이 말하는 잘 쓰여진 책들 말고 서점에 가서 자신의 눈으로 직접 보고 이해할만한 수준의 책을 골라보자.<br>왜 잘 쓰여진 책보다 쉽게 쓰여진 책을 추천하냐면 일단 뇌를 말랑말랑하게 만들어서 자바스크립트와 친밀도를 높이게 하기 위함이다.<br>처음부터 잘 쓰여진 책을 보다보면 자신이 이해할 수 없는 수준으로 얘기하는 경우가 많다.<br>하지만 쉽게 쉽게 쓰여진 책은 다소 설명이 부족하더라도 이해하는데는 큰 무리가 없고 술술 넘어갈 것이다.<br>이런 책은 깊이 없이 그냥 술술 넘어가며 봐야한다. 그냥 ‘JS가 이런 거구나~’하고 맛보기만 하는 것이지 그렇게 깊이 있게 볼만한 책은 아니다.<br>주로 따라해볼만한 예제가 많고 브라우저와 짱친 먹은 예제들(눈에 바로 바로 결과가 보여지니 학습 유도에는 좋았다) 위주의 책이 보기 좋을 것이다.<br>나의 경우에는 HTML+CSS+JS 무따기 시리즈로 JS를 처음 접했는데 지금은 없어진 것 같다.  </p>
<h3 id="2-소문난-책들을-위주로-읽자-단-jQuery-빼고"><a href="#2-소문난-책들을-위주로-읽자-단-jQuery-빼고" class="headerlink" title="2. 소문난 책들을 위주로 읽자, 단 jQuery 빼고"></a>2. 소문난 책들을 위주로 읽자, 단 jQuery 빼고</h3><p>여기서 말하는 소문난 책(내 기준)은 다음과 같다.  </p>
<ul>
<li><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7400243" rel="external nofollow noopener noreferrer" target="_blank">인사이드 자바스크립트</a>  </li>
<li><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=8142241" rel="external nofollow noopener noreferrer" target="_blank">자바스크립트를 말하다</a>  </li>
<li><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=12181869" rel="external nofollow noopener noreferrer" target="_blank">러닝 자바스크립트</a>  </li>
</ul>
<p><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=10338797" rel="external nofollow noopener noreferrer" target="_blank">코뿔소 책</a>이나 <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7204207" rel="external nofollow noopener noreferrer" target="_blank">노란책</a>도 유명하다고들 하나 솔직히 1독이라도 끝낸 사람이 얼마나 될까 싶을 정도라서 그닥 추천하지 않았다.<br>그리고 아직 읽어보지 않았지만 <a href="http://book.naver.com/search/search.nhn?sm=sta_hty.book&amp;sug=pre&amp;where=nexearch&amp;query=You+Don%27t+Know+JS" rel="external nofollow noopener noreferrer" target="_blank">You Don’t Know JS 시리즈</a>도 좋은 것 같다.  </p>
<p>여기서 jQuery를 뺀 이유는 적어도 ES5까지는 알고 나서 제이쿼리를 접하는 걸 추천한다.<br>자바스크립트는 엄연히 <strong>프로그래밍 언어</strong>인데 중간에 jQuery(DOM 조작 라이브러리+@)를 먼저 접하면 프로그래밍 언어 관점 보다는 DOM을 조작하는데 너무 혈안이 될 수도 있다.<br>또 JS를 제대로 모르는 상태에서 jQuery를 접하게 되면 Javascript를 몰라서 나오는 질문을 jQuery를 모르기 때문이라고 생각할 수도 있으며,<br>Javascript로 해결해야하는 상황들을 jQuery의 메소드로 해결하는 상황도 초래할 수 있다.<br>jQuery는 Javascript로 만들어져있기 때문에 절대 VanillaJS(Pure JS)보다 성능 측면에서 좋을 수가 없다.<br>따라서 jQuery를 배우더라도 아직은 그 쪽에 힘을 싣지 않고 Javascript 쪽에 힘을 더 싣는 것을 추천한다.<br>jQuery를 사용하지 않는 곳을 찾기 힘들 정도로 jQuery는 많은 곳에서 사용 중이지만 아래와 같은 글이 있을 정도로 jQuery가 그렇게 짱짱맨인 것 만은 아니다.  </p>
<ul>
<li><a href="https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.ko-KR.md" rel="external nofollow noopener noreferrer" target="_blank">You Don’t Need jQuery</a>  </li>
<li><a href="https://www.tokyobranch.net/archives/6598" rel="external nofollow noopener noreferrer" target="_blank">이제와서 JQUERY를 쓰면 안되는 이유, 혹은 JQUERY와 웹개발의 역사</a>  </li>
</ul>
<h4 id="2-1-MDN-Stackoverflow와-친해지자"><a href="#2-1-MDN-Stackoverflow와-친해지자" class="headerlink" title="2-1. MDN, Stackoverflow와 친해지자"></a>2-1. MDN, Stackoverflow와 친해지자</h4><ul>
<li><a href="https://developer.mozilla.org/" rel="external nofollow noopener noreferrer" target="_blank">MDN</a>은 파이어폭스라는 브라우저를 만든 모질라 재단에서 만든 개발자를 위한 사이트이다.<br>Javascipt 내장 API(Array 관련 메소드 등등)들의 자세한 설명 등등이 나와 있다.<br><a href="http://www.ecma-international.org/ecma-262/7.0/" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript Spec</a>을 보고 이해하기 힘든 내용들은 이 곳에서 자주 참고하자.    </li>
<li><a href="https://stackoverflow.com/" rel="external nofollow noopener noreferrer" target="_blank">Stackoverflow</a>는 개발자 계의 지식 IN이라고 보면 될 것 같다.<br>검색은 네이버(카페)에 의존하기 보다는 구글링(구글에 검색하는 행위)을 통해 Stackoverflow와 같은 사이트 올라온 글들을 참고하자.<br>네이버의 수 백 배에 달하는 글들과 더 좋은 정보들이 있다보니 더 빨리 문제 해결을 할 수 있는 가능성이 높아진다.<br>한 발 더 나아가서 직접 질문과 답변까지 해보면 금상첨화일 것이다.  </li>
<li><a href="https://www.w3schools.com/" rel="external nofollow noopener noreferrer" target="_blank">w3schools</a>라는 사이트가 있지만 <a href="http://www.w3fools.com/" rel="external nofollow noopener noreferrer" target="_blank">w3fools</a>란 사이트가 있을 정도로 잘못된 내용 및 업데이트가 늦다보니 간단한 예제 정도만 참고하자.</li>
</ul>
<h4 id="2-2-ES5를-끝내고-ES2015-를-할-필요가-없다"><a href="#2-2-ES5를-끝내고-ES2015-를-할-필요가-없다" class="headerlink" title="2-2. ES5를 끝내고 ES2015+를 할 필요가 없다"></a>2-2. ES5를 끝내고 ES2015+를 할 필요가 없다</h4><p><strong>웹 에이전시나 쇼핑몰 등등에 근무하는 사람들은 ES5까지(2-1 챕터)까지만 공부하셔도 업무를 보는데는 크게 지장이 없을 것이다.</strong><br>웹 에이전시나 쇼핑몰에 근무하는 사람들이라면 <a href="/2017/04/26/js-001-es/#ES2015">ES2015+</a>는 고사하고 <a href="/2017/04/26/js-001-es/#ES3-1999">ES3</a>를 사용하고 있을 가능성이 크다.(IE8 때문)<br>그래도 IE8도 곧 사장될 거 같기 때문에(아마도…?) <a href="/2017/04/26/js-001-es/#ES5-2009">ES5</a>를 미리미리 공부해두는 게 좋다.<br>또한 협업하는 사람이 ES2015+를 모른다면 다음과 같은 문제점이 존재한다.  </p>
<ol>
<li>협업하는 사람이 ES2015+를 공부해야한다.  </li>
<li>협업하는 사람이 공부할 의지가 없으면 큰일이다.  </li>
<li>추후에 사람을 뽑을 때 ES2015+를 알고 있는 사람으로 뽑아야한다.  </li>
</ol>
<p>이 외에도 다른 문제점들이 존재하겠지만 당장 떠오르는 것은 이게 끝이다.  </p>
<p>해당 챕터부터는 스타트업이나 자사 서비스/대규모 앱을 JS로 개발하는 환경에 종사하는 사람들이라면 반드시 거쳐야하는 과정일 것이다. </p>
<p>과거 나도 ‘ES5를 끝내고 ES2015+를 공부해야하지 않나?’라는 생각 때문에 반년동안 ES5에만 목을 메달다가 어느 스터디에서 ES6(ES2015)와 ES5를 간단하게 비교해주는 내용을 들었는데 정말 혁명이었고 별 거 없었다.<br>ES6 들어서 새로 생긴 Promise, Generator, Iterator 등등의 내용을 다룬 것은 아니고 간단한<br>const/let, Rest Parameter, Default Parameter, Spread Operator, for-of 등등은 정말 금방 배울 수 있다.<br>따라서 내 생각은 똑같은 코드를 ES5로 짜보고 ES2015+로 짜보고 점점 익숙해지면 그 이후에 Promise, Generator, Iterator 등등의 내용을 공부하면 될 것 같다.<br>또한 요즘 프론트 엔드 개발을 할 때 ES5로 짜는 것보다 ES2015+로 짜는 경우가 훨씬 많다.<br>따라서 ES5를 공부할 필요가 없다고 주장하는 사람도 있는데 나는 그 견해와는 입장이 다르다.<br>ES2015+로 짠 코드를 브라우저(특히 MS 계열)에서 정상적으로 지원해주지 않는다.<br>따라서 ES5로 바꿔주어야하는데 결국 브라우저 위에서 도는 것은 ES5 코드이다.<br>그러니까 ES2015+로 짜면서 어느 정도는 ES5로 어떻게 변환될지 상상(?)을 조금 하면서 짤 필요는 있다.<br>ES2015+의 코드를 ES5로 바꿔주는 애가 100% 커버를 해주지 못한다. (그 도구가 꾸진 게 아니라 언어 설계상 오는 차이 때문에…)<br>따라서 대부분은 커버하지만 혹시 모를 에러가 발생할 수도 있으니 ES5 정도는 알아야한다는 게 내 생각이다.  </p>
<h3 id="3-NPM과-Babel을-배우자"><a href="#3-NPM과-Babel을-배우자" class="headerlink" title="3. NPM과 Babel을 배우자."></a>3. NPM과 Babel을 배우자.</h3><p>우선 ES2015+의 코드를 브라우저에서 100% 지원해주지 않는다.<br>따라서 ES5로 변환(트랜스파일)해줘야 하는데 그 중에 제일 많이 쓰고 좋다고 생각되는 것은 Babel이다.<br>이 Babel을 사용하는 가장 쉬운 방법은 <a href="https://babeljs.io/repl/" rel="external nofollow noopener noreferrer" target="_blank">Babel REPL</a>을 이용하는 것이다.<br>그런데 매번 소스를 복붙 해서 트랜스파일하는 귀찮은 과정을 반복할 것인가?<br>그리고 우리는 바벨이 ES5로 트랜스파일 한 코드를 보고 이해하지 못한다.<br>따라서 우리가 소스 유지보수를 하기 위해서는 ES2015+로 짠 코드 하나, ES5로 트랜스파일 된 코드 하나, 총 두 개를 들고 있어야한다.<br>이런 귀찮은 작업을 줄여주기 위한 것이 <a href="https://babeljs.io/docs/usage/cli/" rel="external nofollow noopener noreferrer" target="_blank">babel-cli</a>이다.<br>MS-DOS 유저라면 익숙할 법한 시꺼먼 창인 터미널(윈도우의 CMD)에서 트랜스파일을 해주는 도구이다.<br>하지만 이 babel-cli를 설치는 npm을 통해서만 가능하다. (왜냐면 babel-cli가 Node.js 위에서 돌기 때문…)<br>npm은 <a href="https://nodejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Node.js</a>를 설치하면 자동으로 설치된다.<br>이 때 우리가 배워야할 것은 두 가지이다.  </p>
<ol>
<li>npm 사용 방법(package.json에 대해 공부하기, 모듈 설치 삭제 해보기)  </li>
<li><a href="https://babeljs.io/docs/usage/cli/#babel" rel="external nofollow noopener noreferrer" target="_blank">babel-cli 사용 방법</a>  </li>
</ol>
<h3 id="4-ES2015-가-익숙해졌다면-Typescript를-공부해보자"><a href="#4-ES2015-가-익숙해졌다면-Typescript를-공부해보자" class="headerlink" title="4. ES2015+가 익숙해졌다면 Typescript를 공부해보자"></a>4. ES2015+가 익숙해졌다면 Typescript를 공부해보자</h3><p>ES2015+가 아무리 좋아졌다고 하더라도 다음과 같은 걸 해결하지 못했다.  </p>
<ol>
<li>정적 타입  </li>
<li>사용자가 직접 인터페이스 구현  </li>
<li>private 접근 지정자<br>등등이 있는데 이 ES2015+의 모든 특성들을 포함한 Superset 격인 Typescript란 게 존재한다.  </li>
</ol>
<p>나도 타입스크립트는 잘 모르기 때문에 1번을 토대로 장점을 설명해보겠다.  </p>
<ol>
<li>코드의 안정성<br>앱의 규모가 커지면 커질 수록 코드를 파악하기 힘들어지는 경향이 존재한다.<br>또 오랜 시간이 지난 코드를 유지보수 할 때도 마찬가지이다.<br>이럴 때 어떤 메소드를 써야할 때 첫 번째 매개변수로 문자열이 와야하는지, 숫자가 와야하는지, 매개변수를 몇 개를 넘겨야하는지, 생략이 가능한지<br>기존 동적 타입에서는 체크할 수 없었던 내용 등등을 체크하므로 어떻게 메소드를 사용해야하는지 직접 메소드 구현부로 가서 파악할 필요가 없어진다.  </li>
<li>코드의 자동완성<br>어떤 함수로부터 값을 반환 받았는데 이게 배열인 줄 알고 forEach 메소드를 썼는데 알고보니 Object가 반환되는 경우였다고 생각해보자.<br>기존 동적 타입에서는 어떤 자료형이 반환되는지 모르니 자동완성에 배열의 메소드, 문자열의 메소드 등등이 전부 뜰 것이다.<br>하지만 정적인 타입으로 딱 Object가 반환된다는 게 확정된 메소드라면 자동완성에 배열의 메소드도 뜨지 않을 것이며 배열의 메소드를 사용하면<br>에디터 상에서 오류로 표시되기 때문에 이런 것도 어찌보면 코드의 안정성과 연결이 되는 점이기도 하다.  </li>
</ol>
<p>하지만 장점이 있으면 단점이 있듯, 내 기준에서 단점을 서술해보겠다.  </p>
<ol>
<li>생산성이 떨어진다(초기에)<br>동적 타입인 js는 코드를 대충 빨리 짜도 돌아간다.<br>따라서 생산성이 높다고 볼 수 있다. (하지만 나중을 생각한다면…)<br>하지만 타입스크립트는 타입 체크가 매우 빡빡하다.<br>따라서 동일한 코드를 짤 때도 더 오래 걸릴 수도 있다.<br>하지만 나중에 되면 아마 타입스크립트가 훨씬 빠를 것이다.  </li>
<li>외부 라이브러리에 대한 타입 정의도 모두 해줘야한다.<br>이게 제일 사람 미치게 한다.<br>유명한 라이브러리의 경우 미리 다 타입 정의 파일이 있는데 없는 경우에는 직접 만들거나 적폐 세력(any)를 사용해야한다.<br>또한 라이브러리의 버전과 타입 정의한 파일의 버전이 불일치하는 경우도 있고 골칫거리다.<br>이러한 단점 때문에 타입스크립트를 포기하는 경우가 많다. (나도… ㅠㅠ)</li>
</ol>
<h2 id="번외편"><a href="#번외편" class="headerlink" title="번외편"></a>번외편</h2><p>해당 파트는 자바스크립트와 직접적으로 관련이 있다고는 말할 수 없다.<br>하지만 나는 자바스크립트로 개발을 한다면(특히 ES2015+) 당연히 알면 좋다고 생각하는 내용들을 정리해봤다.  </p>
<h3 id="1-코드-검사-도구를-사용하자"><a href="#1-코드-검사-도구를-사용하자" class="headerlink" title="1. 코드 검사 도구를 사용하자."></a>1. 코드 검사 도구를 사용하자.</h3><p>코드를 짤 때 항상 일관성 있게 짜야한다.<br>하물며 한 사람이 짤 때도 문자열을 표시하는데 “”나 ‘’을 혼용한다던지<br>들여쓰기를 위해 탭과 들여쓰기를 혼용한다던지 등등의 경우에 놓이게 되는데<br>다른 사람들과 협업하다보면 하나의 소스 파일의 가독성은 똥망진창이 될 것이다.<br>하지만 사람의 눈으로 꼼꼼히 체크한다 해도 꼭 놓치기 마련이다.<br>이렇게 코딩 컨벤션을 지켰는지와 에러 등등을 체크해주는 툴로 JS에서는 <a href="http://www.jslint.com/" rel="external nofollow noopener noreferrer" target="_blank">JSLint</a>, <a href="http://jshint.com/" rel="external nofollow noopener noreferrer" target="_blank">JSHint</a>, <a href="http://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a> 등등이 있다.<br>각자 <a href="https://github.com/js-jsm/pattern/tree/devlop/02-%EB%8F%84%EA%B5%AC_%EB%8B%A4%EB%A3%A8%EA%B8%B0#코드-검사-도구" rel="external nofollow noopener noreferrer" target="_blank">장단점</a>을 파악해보고 마음에 드는 걸 사용하면 좋은데 ESLint를 추천한다.<br>또한 TS 진영에서는 <a href="https://palantir.github.io/tslint/" rel="external nofollow noopener noreferrer" target="_blank">TSLint</a>를 사용하면 된다.</p>
<h3 id="2-Task-Runner를-배우자"><a href="#2-Task-Runner를-배우자" class="headerlink" title="2. Task Runner를 배우자"></a>2. Task Runner를 배우자</h3><p>기존의 자바스크립트 소스 코드를 개발하던 방식에는 다음과 같은 문제가 존재한다.  </p>
<ul>
<li><p>유저에게 불필요한 데이터를 전송하여 LTE 데이터를 낭비하게 만들고, 그 데이터들로 하여금 로딩 속도를 느리게 만듦으로써 사용자에게 최적화된 UX를 제공해주지 못하고 있다.<br>이게 뭔소린가 싶으면 우리의 소스 코드를 보면 공백과 기나긴 변수명 등등을 가지고 있다.<br>이거는 사람 입장에서 가독성을 높여 유지보수하기 편하게 한 것이지, 컴퓨터 입장에서는 이런 애들은 불필요하다.<br>따라서 공백을 줄이고(minify), 변수명을 난독화(a, b와 같은 걸로 줄이는 작업, uglify)시키는 작업을 해야한다.    </p>
</li>
<li><p>우리가 사용하는 웹 브라우저는 HTTP 프로토콜 위에서 통신을 한다.<br>요즘 <a href="http://www.popit.kr/%EB%82%98%EB%A7%8C-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%9E%88%EB%8D%98-http2/" rel="external nofollow noopener noreferrer" target="_blank">HTTP 2</a>도 나왔지만 아직까지 브라우저/서버의 호환 때문에 많은 사람들이 HTTP 1.1을 사용 중이다.<br>HTTP/1.1는 기본적으로 Connection당 하나의 요청을 처리 하도록 설계 되어있다.<br>그래서 동시전송이 불가능하고 요청과 응답이 순차적으로 이루어 지게된다.<br>그렇다 보니 HTML 문서안에 포함된 다수의 리소스 (Images, CSS, Script)를 처리하려면 요청할 리소스 개수에 비례해서 Latency(대기 시간)는 길어지게 된다.<br>SPA(Single Page Application)의 경우 다수의 스크립트 파일을 로딩하나 하나로 합친(concat) 스크립트 파일을 로딩하나 동일하게 작동한다.<br>다수의 파일은 대기 시간이라는 오버헤드(쓸 데 없는 비용(여기서 시간도 비용으로 측정함))가 발생하기 때문에 다수의 스크립트 파일을 하나로 합쳐주는 작업도 해야한다.  </p>
</li>
</ul>
<p>이런 작업을 하는 방법은 여러 가지가 있는데 <a href="https://skalman.github.io/UglifyJS-online/" rel="external nofollow noopener noreferrer" target="_blank">UglifyJS</a>를 이용하는 것이 가장 간단하다.<br>하지만 이는 Babel REPL과 마찬가지로 수동으로 해줘야한다는 단점이 존재한다.<br>이러한 Minify 작업(Task), Uglify 작업, concat 작업 등등 무수한 최적화 작업을 소스 코드가 수정될 때마다 일일이 하고 싶을까?<br>이러한 작업(Task)들을 실행(Run)을 하나의 단위로 묶어서 한 번에 실행시켜주는 Task Runner란 게 존재한다.<br>그 중에서도 <a href="https://gruntjs.com/" rel="external nofollow noopener noreferrer" target="_blank">Grunt</a>와 <a href="https://gulpjs.com/" rel="external nofollow noopener noreferrer" target="_blank">Gulp</a>가 있는데 둘 중에 아무거나 해도 상관이 없을지 모르겠는데 나는 Gulp를 배웠다.  </p>
<h3 id="3-Module-Bundler를-배우자"><a href="#3-Module-Bundler를-배우자" class="headerlink" title="3. Module Bundler를 배우자."></a>3. Module Bundler를 배우자.</h3><p>자바스크립트에서 스코프는 함수 단위(const와 let은 블록 단위)이고, 모듈이란 게 존재하지 않았다.<br>따라서 <a href="/2017/05/20/js-005-module/#네임스페이스-패턴">네임스페이스 패턴</a>과 같은 꼼수를 사용해서 모듈화를 구현하곤 하였다.  </p>
<p>시간이 흘러 Node.js 진영에서는 <a href="http://www.commonjs.org/" rel="external nofollow noopener noreferrer" target="_blank">CommonJS</a> 스펙을 준수해서 모듈화를 구현하였다.<br>하지만 웹 브라우저는 사용자들이 <strong>파일을 내려받아야한다</strong>는 특수한 상황이 존재해서 비동기적으로 모듈을 로딩해야한다는 특수한 상황에 놓여있다.<br>이를 위한 <a href="https://github.com/amdjs/amdjs-api/wiki/AMD" rel="external nofollow noopener noreferrer" target="_blank">AMD(Asynchronous Module Definition)</a> 스펙이 있고, 이를 구현한 <a href="http://requirejs.org/" rel="external nofollow noopener noreferrer" target="_blank">RequireJS</a>라는 라이브러리가 있다.<br>자세한 내용은 <a href="http://d2.naver.com/helloworld/12864" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a>를 참고하자.</p>
<p>하지만 ES2015에 들어와서 Module을 언어단에서 지원해주는 import와 export 문법이 존재한다.<br>하지만 현재 이를 지원하는 브라우저/Node는 <strong>없다</strong>.<br>따라서 브라우저 진영에서는 여전히 A 모듈, B 모듈 등등을 각각 로딩해야하는 사태가 발생했는데 이 때 구세주처럼 등장한 게 Module Bundler이다.<br>Bundle은 ‘꾸러미’라는 의미로 하나로 합친다는 의미를 지니고 있다.<br>Task Runner의 concat은 단순히 소스 코드 자체만을 합치지만 이 Module Bundler는 모듈 간의 관계를 전부 파악해서 단일 모듈(소스 파일)로 Bundling 해준다.<br>따라서 Task Runner에서는 불가능한데 Module Bundler에서는 다음과 같은 것들이 가능하다. (설명은 Webpack 기준)  </p>
<ol>
<li><a href="/2017/03/13/webpack2-code-splitting/">Code Splitting(코드 분할)</a>  <ol>
<li>변경률이 적은 서드파티(제이쿼리, 리액트 등등의 라이브러리나 프레임워크)들을 따로 빼서 사용자의 임시 파일에 저장시켜놓고 방문할 때마다 해당 내용을 캐싱하게 끔 해서 좀 더 로딩 속도를 높이기.  </li>
<li>SPA라고 해도 사용자가 모든 URI를 방문하는 게 아니니 URI 별로 소스 코드를 빼기.  </li>
<li>그런데 URI 별로 소스 코드를 빼도 파일의 크기가 너무 작은 경우에는 오히려 요청/응답에 대한 오버헤드가 클 수 있으므로 소스 코드의 최소한의 크기 정하기.  </li>
</ol>
</li>
<li><a href="/2017/03/12/webpack2-tree-shaking/">Tree Shaking(나무의 가지를 흔들어 썩은 열매를 떨어뜨리 듯, 필요없는 코드들을 삭제하기)</a><br>쓰지 않는 코드(변수 함수 등등)들이 있는 경우에 자동으로 번들링 할 때는 없애기.  </li>
<li>파일의 크기가 작은 경우에는 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" rel="external nofollow noopener noreferrer" target="_blank">Data URL</a>로 리소스를 표현하기(폰트, 이미지, svg 등등)<br>웹팩에서는 js 소스만 모듈로 보는 게 아니라 정적인 리소스들(이미지, 폰트, svg 등등)을 모두 모듈로 보고 있다.<br>그래서 이 모듈(정적인 리소스)들을 컨트롤 할 수 있게 된다.<br>그런데 이미지 크기가 너무 작은 경우에는 요청/응답에 대한 오버헤드를 줄이기 위해 sprite image를 이용할 수도 있고, Data URL을 이용할 수도 있다.<br>하지만 sprite image를 만드는 것은 귀찮고 사용하기도 불편할 때가 있다. (이를 위한 플러그인들도 많지만)<br>그래서인지 모던 브라우저에서는 이런 Data URL을 통해서도 그런 오버헤드를 줄일 수 있다.<br>물론 성능은 sprite image가 Data URL보다 더 뛰어난 것으로 알고 있다.</li>
</ol>
<p>원래 Module Bundler 성격은 모듈과 관련된 것만 다루는 것이었는데 이제는 Task Runner의 기능까지 삼켜서 minify, uglify 등등의 기능까지 흡수를 해서 어지간하면 Module Bundler만 사용해도 될 정도이다.<br>하지만 Module Bundling 이전에 처리해야하는 특수한 경우에는 Task Runner에서 작업들을 처리한 이후에 Module Bundler를 돌려야할 것이다.<br>Module Bundler로는 <a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">Webpack</a>, <a href="http://browserify.org/" rel="external nofollow noopener noreferrer" target="_blank">browserify</a>, <a href="https://rollupjs.org/" rel="external nofollow noopener noreferrer" target="_blank">rollup</a> 등등이 있는데<br>Webpack이 제일 사용자도 많고, github start도 많고, 커뮤니티 활성화도 잘 돼있으므로 Webpack을 공부하는 걸 추천한다.  </p>
<h3 id="4-TDD를-공부하자"><a href="#4-TDD를-공부하자" class="headerlink" title="4. TDD를 공부하자."></a>4. TDD를 공부하자.</h3><p>TDD(Test Driven Development)는 다음과 같은 개발 행위를 말한다.  </p>
<ol>
<li>테스트 코드를 먼저 짠다.  </li>
<li>테스트 코드가 통과하게 앱의 코드를 짠다.  </li>
</ol>
<p>이를 통해 얻을 수 있는 장점은 다음과 같다.  </p>
<ol>
<li>내가 구현해야 하는 코드(테스트 통과)가 무엇인지 명확해진다.  </li>
<li>코드를 수정해도 잘 돌아갈 거라는 안심이 된다.<br>테스트 코드를 작성하지 않았으면 코드를 수정하고 해당 메소드를 사용하는 부분을 전부 다시 테스트해봐야한다.<br>하지만 테스트 코드들을 작성했다면 해당 테스트를 통과했다면 수정한 메소드를 사용한 부분들이 정상적으로 동작한다고 볼 수 있으므로 심신에 안정이 찾아오게 된다.  </li>
</ol>
<p>TDD는 아니더라도 앱의 코드를 먼저 짜더라도 테스트 코드는 반드시 짜는 습관을 들이자.(나부터라도…)<br>하지만 많은 사람들이 아래와 같은 상황 때문에 TDD를 못하는 것 같다.  </p>
<ol>
<li>테스트 코드 짜는데 시간이 더 걸린다.<br>초기에는 그럴지 몰라도 앱의 규모가 커지거나 유지보수를 생각한다면 TDD가 더 오래 걸리지는 않을 것이다. (더 적게 걸리지 않을 지도…)  </li>
<li>어디서부터 어디까지를 테스트해야할지 모르겠어요.<br>저도 모르겠어요… 누가 좀 알려주신다면 ㅠㅠ  </li>
<li>E2E(End to End) Test는 어떻게 하죠?<br>저도 UI 단 테스트는 안 해봐서 누군가 피드백을 주신다면 수정하겠습니다.  </li>
</ol>
<p>이 TDD를 도와주는 프레임워크로는 <a href="https://jasmine.github.io/" rel="external nofollow noopener noreferrer" target="_blank">jasmine</a>, <a href="https://mochajs.org/" rel="external nofollow noopener noreferrer" target="_blank">mocha</a>, <a href="http://chaijs.com/" rel="external nofollow noopener noreferrer" target="_blank">chai</a> 등등이 있다.<br>그리고 이러한 테스트를 자동으로 돌려주는 등 위 프레임워크들을 도와주는 Test Runner인 <a href="https://karma-runner.github.io/1.0/index.html" rel="external nofollow noopener noreferrer" target="_blank">karma</a>가 있다.  </p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>내가 컴공을 전공하다 보니 비전공자나 입문자에게는 다소 딱딱하게 들리거나 어렵게 들린 내용이 많을 것이다.<br>다 내가 모르는 게 많아 이런 내용들을 쉽게 풀어내는 능력이 부족하기 때문이다 ㅠㅠ…<br>여튼 글을 보고 궁금한 점, 부족한 점, 잘못된 점 등등은 전부 댓글로 피드백 부탁드립니다~~ </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 포스트는 제가 다년간 자바스크립트를 설렁 설렁 공부하다 작년 1년동안 빡시게 공부해온 경험을 토대로 작성한 글입니다.&lt;br&gt;따라서 이 글을 읽으시는 분들께서는 본인과 맞지 않는 
    
    </summary>
    
      <category term="Programming" scheme="http://perfectacle.github.io/categories/Programming/"/>
    
      <category term="ECMAScript" scheme="http://perfectacle.github.io/categories/Programming/ECMAScript/"/>
    
    
      <category term="JS" scheme="http://perfectacle.github.io/tags/JS/"/>
    
      <category term="ES" scheme="http://perfectacle.github.io/tags/ES/"/>
    
      <category term="독학" scheme="http://perfectacle.github.io/tags/%EB%8F%85%ED%95%99/"/>
    
  </entry>
  
  <entry>
    <title>(자알쓰) 클로저</title>
    <link href="http://perfectacle.github.io/2017/08/07/js-013-closure/"/>
    <id>http://perfectacle.github.io/2017/08/07/js-013-closure/</id>
    <published>2017-08-07T02:53:42.000Z</published>
    <updated>2017-08-09T02:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 열 세 번째 시리즈는 클로저를 주제로 진행하겠다.</p>
<h2 id="들어가기-전에"><a href="#들어가기-전에" class="headerlink" title="들어가기 전에"></a>들어가기 전에</h2><p>프로그래밍 언어에는 <strong>지역 변수</strong>란 게 존재한다.<br>이 지역변수는 변수의 <a href="/2017/04/27/js-003-scope/">스코프</a>에 의존적이다.<br>여타 프로그맹 언어에서 변수의 스코프는 <strong>{} 블록 단위</strong>지만,<br>자바스크립트의 변수의 스코프는 <strong>함수 단위</strong>이다. (물론 ES6의 const와 let의 스코프는 블록 단위)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 글로벌 스코프 시작</span></div><div class="line"><span class="keyword">var</span> global = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 로컬 스코프 func 시작</span></div><div class="line">  <span class="keyword">var</span> local = <span class="number">1</span>;</div><div class="line">  <span class="comment">// 로컬 스코프에서는 로컬 스코프와 글로벌 스코프에 접근 가능</span></div><div class="line">  <span class="built_in">console</span>.log(global);</div><div class="line">  <span class="built_in">console</span>.log(local);</div><div class="line">  <span class="comment">// 로컬 스코프 끝</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 글로벌 스코프에서는 글로벌 스코프만 접근 가능</span></div><div class="line"><span class="built_in">console</span>.log(global);</div><div class="line"><span class="built_in">console</span>.log(local); <span class="comment">// Uncaught ReferenceError: local is not defined</span></div><div class="line"><span class="comment">// 글로벌 스코프 끝</span></div></pre></td></tr></table></figure></p>
<p>스코프의 접근 가능한 스코프는 자기 자신을 포함한 상위 스코프이다.<br>글로벌 스코프의 접근 가능한 범위는 글로벌 스코프가 최상위 스코프이므로 글로벌 스코프 자기 자신 밖에 없고,<br>로컬 스코프 func의 접근 가능한 스코프는 자기 자신인 func와 자신의 상위 스코프인 global 스코프가 된다.</p>
<h2 id="왜-이런-현상이-발생할까"><a href="#왜-이런-현상이-발생할까" class="headerlink" title="왜 이런 현상이 발생할까?"></a>왜 이런 현상이 발생할까?</h2><p>이는 전역 변수와 지역 변수가 메모리(RAM)의 어느 영역(<a href="/2017/02/09/C-ref-004/">Code, Data, Stack, Heap</a>)에 적재되는지와 관련이 있다.<br>전역 변수는 메모리의 Data라는 영역에 적재돼서 프로그램의 종료 시까지 계속 적재돼있다.<br>따라서 어디서나 사용이 가능하다.<br>지역 변수는 메모리의 Stack이라는 영역에 적재되고, 지역 변수의 생명주기(Lifecycle)는 <strong>함수 호출 시 생성되고 함수가 종료되면 시스템에 의해 반환</strong>된다.</p>
<h2 id="클로저는-왜-쓸까"><a href="#클로저는-왜-쓸까" class="headerlink" title="클로저는 왜 쓸까?"></a>클로저는 왜 쓸까?</h2><p>위와 같이 지역변수는 함수 호출 시 메모리에 할당되고, 함수가 종료되면 메모리에서 해제된다.<br>따라서 지역변수는 <strong>호출할 때마다 항상 같은 값으로 초기화</strong>된다.<br>하지만 가끔 함수를 호출할 때 <strong>이전에 존재했던 값을 유지</strong>하고 싶어질 때가 있다.<br>그러려면 함수가 종료됐을 때 해당 지역 변수가 메모리에서 해제되면 안 된다.  </p>
<h2 id="클로저는-어떻게-구현해야할까"><a href="#클로저는-어떻게-구현해야할까" class="headerlink" title="클로저는 어떻게 구현해야할까?"></a>클로저는 어떻게 구현해야할까?</h2><p>함수가 종료돼도 지역 변수가 메모리에서 해제되지 않으려면 어떻게 해야할까?<br>이를 위해서는 자바스크립트의 GC(Garbage Collector, 메모리 상에 쓸 데 없는 녀석 수거해가는 녀석)가 어떻게 동작하는지 간단하게나마 알아봐야한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'양간장'</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'간장냥'</span>&#125;;</div><div class="line">obj = obj2;</div></pre></td></tr></table></figure></p>
<p>3번 라인에서 obj는 <code>{name: &#39;간장냥&#39;}</code>을 참조하게 만들었다.<br>그럼 <code>{name: &#39;양간장&#39;}</code>이라는 데이터는 참조가 불가능 해졌으므로 사용할 방법이 없는 쓸 데 없는 녀석이 된다.<br>이때 저 <code>{name: &#39;양간장&#39;}</code>은 GC(Garbage Collecting) 대상이 되며 GC(Garbage Collector)가 적절한 시점(개발자 도구 열닫 혹은 일정 시간 이후?)에 수거해간다.<br>따라서 메모리 상에서 데이터가 해제되지 않게 하려면 <strong>누군가는 해당 녀석을 참조</strong>하게 만들어서 GC(Garbage Collecting) 대상에서 제외시켜야한다.<br>이를 위해서는 다음과 같은 조건 제약이 따른다.  </p>
<ul>
<li>조건 1. 참조하는 대상이 참조하는 녀석과 접근 가능한 스코프에 있어야 한다.<br>가령 예를 들어 참조하는 대상(<code>{name: &#39;양간장&#39;}</code>)과 참조하는 녀석(<code>obj</code>)이 접근 가능한 스코프에 있어야한다는 소리이다.<br>접근 가능한 스코프 상에 존재해야 오류 없이 해당 데이터를 참조할 수 있기 때문이다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></div><div class="line">&#125;;</div><div class="line">c();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>로컬 스코프 c의 접근 가능한 스코프는 자신을 포함한 상위 스코프이다.  </p>
<ul>
<li>로컬 스코프 c</li>
<li>전역 스코프<br>따라서 로컬 스코프 c에서 로컬 스코프 b로 접근이 불가능하다.    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(b++); <span class="comment">// 1</span></div><div class="line">    &#125;;</div><div class="line">    c();</div><div class="line">&#125;;</div><div class="line">a(); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>위 예제에서 로컬 스코프 c가 접근 가능한 스코프는 자신을 포함한 상위 스코프이다.  </p>
<ul>
<li>로컬 스코프 c  </li>
<li>로컬 스코프 a  </li>
<li>전역 스코프<br>위 코드는 참조하는 대상(<code>b</code>)이 로컬 스코프 a에 있고, 참조하는 녀석(<code>console.log(b)</code>)이 로컬 스코프 c에 있다.<br><strong>참조하는 대상(로컬 스코프 a)이 참조하는 녀석(로컬 스포크 c)과 접근 가능한 스코프에 있어야 한다</strong>는 조건을 만족하고 있다.</li>
</ul>
<ul>
<li>조건 2. 참조하는 대상이 존재하는 함수를 호출하는 게 아니라 참조하는 녀석이 존재하는 함수를 직접 호출해야한다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(b++); <span class="comment">// 1</span></div><div class="line">    &#125;;</div><div class="line">    c();</div><div class="line">&#125;;</div><div class="line">a(); <span class="comment">// 1</span></div><div class="line">a(); <span class="comment">// 1</span></div><div class="line">a(); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>기껏 위와 같이 로컬 스코프와 그 내부 스코프로 나누어서 b의 값을 유지하고자 했는데 함수 a를 호출할 때마다 계속해서 1이 출력된다.<br>우리는 b의 값이 유지돼서 b++을 하고 있으므로 호출할 때마다 1이 상승된 값을 원했는데 그게 아니다.<br>그러기 위해서는 조건 2를 만족시켜주면 된다.<br>즉 참조하는 대상(<code>b</code>)이 존재하는 함수 a를 호출할 게 아니라 참조하는 녀석(<code>console.log(b)</code>)이 존재하는 함수 c를 호출해야한다.<br>함수 a를 백날 호출해봤자 지역변수 b를 초기화 시켜주는 구문이 매번 실행되기 때문에 참조를 아무리 한들 b의 값이 유지되는 게 아니다.<br>하지만 스코프의 접근 가능한 스코프는 자신을 포함한 상위 스코프인데 전역 스코프에서 어떻게 로컬 스코프 a에 존재하는 c를 호출할 수 있을까?<br>이는 자바스크립트의 특성인 <strong>함수는 <a href="/2017/06/30/js-func-00-what/#일급-함수-일급-객체-일급-시민">first-class-citizen</a>임</strong>을 활용하면 된다.<br>전역 스코프에서 c를 호출할 수 있게 하려면 전역 변수와 함수 c 사이에 어떠한 매개체를 뚫어줘야한다.<br>이는 위에서 말한 일급 객체의 특성을 살려 함수 a를 호출했을 때 함수 c(를 호출하는 게 아님)를 리턴함으로써 전역 스코프와 함수 c 사이에 다리를 놔준다고 보면 된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(b++);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;;</div><div class="line">a = a();</div><div class="line">a(); <span class="comment">// 1</span></div><div class="line">a(); <span class="comment">// 2</span></div><div class="line">a(); <span class="comment">// 3</span></div><div class="line">a(); <span class="comment">// 4</span></div></pre></td></tr></table></figure></p>
<p>함수 a를 호출한 결과(내부 함수 c)를 다시 a에 담는 과정이 불필요하다고 생각되니 IIFE(즉시 실행 함수, Immediately Invoked Function Expressions)를 이용하면 아래와 같이 줄일 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(b++);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;)();</div><div class="line">a(); <span class="comment">// 1</span></div><div class="line">a(); <span class="comment">// 2</span></div><div class="line">a(); <span class="comment">// 3</span></div><div class="line">a(); <span class="comment">// 4</span></div></pre></td></tr></table></figure></p>
<p>함수 c를 리턴할 수도 있지만, 아래와 같이 익명함수로 리턴하는 게 대부분이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(b++);</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line">a(); <span class="comment">// 1</span></div><div class="line">a(); <span class="comment">// 2</span></div><div class="line">a(); <span class="comment">// 3</span></div><div class="line">a(); <span class="comment">// 4</span></div></pre></td></tr></table></figure></p>
<p>함수 c와 같이 기명 함수를 리턴하는 경우는 함수 내에서 자기 자신을 호출하는 재귀 함수를 구현할 때 뿐인 것 같다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(b++);</div><div class="line">      <span class="keyword">if</span>(b &lt; <span class="number">10</span>) c();</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;)();</div><div class="line">a(); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></div><div class="line">a(); <span class="comment">// 10</span></div><div class="line">a(); <span class="comment">// 11</span></div><div class="line">a(); <span class="comment">// 12</span></div></pre></td></tr></table></figure></p>
<ul>
<li>조건 3. 참조하는 대상이 전역 스코프가 아니어야한다.<br>전역 스코프는 어차피 프로그램 종료 시까지 메모리에 계속 할당돼있으므로 상관이 없는 이야기이다.  </li>
</ul>
<h2 id="그래서-클로저가-뭔데"><a href="#그래서-클로저가-뭔데" class="headerlink" title="그래서 클로저가 뭔데?"></a>그래서 클로저가 뭔데?</h2><p>먼저 클로저를 설명하기 보다는 적절한 사용 사례를 설명하고 클로저가 뭔지를 풀어 놓는 게 독자의 흥미를 유발할 거 같아서 일부러 뒤로 배치하였다.<br>클로저는 다음과 같이 정의하고 있다.<br>인사이드 자바스크립트 책에서는 <strong>이미 생명 주기가 끝난 외부 함수의 변수를 참조하는 함수</strong>,<br><a href="http://blog.javarouka.me/2012/01/blog-post_13.html" rel="external nofollow noopener noreferrer" target="_blank">한 블로그</a>에서는 <strong>생성 당시의 스코프에 대한 연결을 갖는 블록</strong>이라고 정의하고 있다.<br>즉, 위에서 c가 클로저이다.<br>변수 b는 지역 변수이므로 a 함수 종료와 동시에 죽어야하는 변수이다.<br>하지만 그 생명 주기가 끝난 변수(b)를 참조하는 c라는 함수를 사용해서 클로저를 구현하였다.  </p>
<h2 id="클로저의-장점"><a href="#클로저의-장점" class="headerlink" title="클로저의 장점"></a>클로저의 장점</h2><ol>
<li>위에서 본 바와 같이 함수를 호출할 때마다 기존에 생성했던 값을 유지할 수 있다.  </li>
<li>외부에 해당 변수(참조하고 있는 변수)를 노출시키지 않는다.<br>이게 무슨 장점이냐고 생각한다면 코드의 안정성을 보장해준다는 뜻이다.<br>이는 캡슐화(encapsulation)와도 관련이 있는데 알약을 먹는 사람이 알약만 먹어서 병이 치료만 되면 되지, 그 내부의 내용물은 중요하지 않다는 개념이다.<br>근데 만약 환자가 캡슐을 까서 내용물을 바꾸고 다시 캡슐을 씌우고 그 알약을 먹는다면?? 과연 환자의 상태를 보장할 수 있을까?<br>이렇듯 프로그래밍에서 말하는 캡슐화는 환자가 내용물을 바꾸지 못하게(클로저에서 참조하는 변수를 변경하지 못하게 해서),<br>즉 내가 개발한 소스를 사용하는 입장(내가 될 수도 있고 내가 만든 라이브러리를 사용하는 제 3자가 될 수도 있고)에서 코드의 안정성을 보장받게 되는 것이다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 개발자(약사) 입장에서 짠 코드</span></div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>; <span class="comment">// 개발자가 변수에 값을 넣었다. (약사가 약의 내용물을 넣었다.)</span></div><div class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 클로저를 이용하여 내용을 캡슐화 하였다. (약사가 약들을 캡슐로 감쌌다.)</span></div><div class="line">      <span class="built_in">console</span>.log(b++);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> c; <span class="comment">// 사용자(환자)가 해당 변수를 참조만 가능하고(약의 복용만 가능하고), 변경은 불가능하게(캡슐을 까서 그 안의 약물들을 못 갈아치우게) 했다.</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 실제 사용자(환자)는 해당 변수(약물)을 변경할 수 있는 방법이 없어서 코드의 안정성(환자의 상태)를 보장받을 수 있다.</span></div><div class="line"><span class="keyword">var</span> d = a();</div><div class="line">d();</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="클로저의-단점"><a href="#클로저의-단점" class="headerlink" title="클로저의 단점"></a>클로저의 단점</h2><p>클로저는 위와 같이 좋은 점도 존재하는데 역시 신은 공평하듯 모든 걸 주시지 않았는데 바로 아래와 같은 단점이 존재하기 때문이다.  </p>
<ul>
<li>클로저로 참조하는 변수는 프로그램 종료 시까지 계속 메모리에 할당돼있다.</li>
</ul>
<p>그게 뭐 어때서? 라고 생각하는 경우가 있을 수도 있고 위 경우가 크게 문제가 되지 않을 수도 있다.<br>하지만 사용 가능한 메모리(브라우저마다 다르겠지만…)를 초과하는 사태가 발생할 수도 있고, 성능 상 좋다고 말할 수 있는 사항은 아니다.<br>위와 같은 현상이 발생하는 이유는 계속해서 참조를 하고 있으므로 GC(Garbage Collecting) 대상이 되지 않기 때문이다.<br>따라서 클로저는 이러한 성능 이슈를 가지고 있기 때문에 항상 주의를 기울여 사용을 최소화해야하며 오남용해서는 안 된다.</p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>클로저를 알아야 자바스크립트 고수니 중급으로 넘어가느니 등등의 얘기가 많이 들리는 것 같은데 실상 제대로 파고들어가 보면 별 거 아니란 사실을 알 수 있다.<br>하지만 이와 같은 사항들을 알기 위해서는 아래와 같은 사항은 반드시 짚고 넘어가야 할 것이다.  </p>
<ol>
<li><a href="/2017/04/27/js-003-scope/">변수의 스코프</a>  </li>
<li><a href="#왜-이런-현상이-발생할까">변수의 생명주기(Lifecycle)</a>  </li>
<li><a href="#클로저는-어떻게-구현해야할까">GC(Garbage Collector)가 GC(Garbage Collecting)하는 대상</a>  </li>
<li><a href="/2017/06/30/js-func-00-what/#일급-함수-일급-객체-일급-시민">First Class Citizen</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;자알쓰란&quot;&gt;&lt;a href=&quot;#자알쓰란&quot; class=&quot;headerlink&quot; title=&quot;자알쓰란?&quot;&gt;&lt;/a&gt;자알쓰란?&lt;/h2&gt;&lt;p&gt;&lt;code&gt;자&lt;/code&gt;바스크립트 &lt;cod
    
    </summary>
    
      <category term="Programming" scheme="http://perfectacle.github.io/categories/Programming/"/>
    
      <category term="ECMAScript" scheme="http://perfectacle.github.io/categories/Programming/ECMAScript/"/>
    
      <category term="자알쓰" scheme="http://perfectacle.github.io/categories/Programming/ECMAScript/%EC%9E%90%EC%95%8C%EC%93%B0/"/>
    
    
      <category term="JS" scheme="http://perfectacle.github.io/tags/JS/"/>
    
      <category term="ES" scheme="http://perfectacle.github.io/tags/ES/"/>
    
      <category term="자알쓰" scheme="http://perfectacle.github.io/tags/%EC%9E%90%EC%95%8C%EC%93%B0/"/>
    
      <category term="Closure" scheme="http://perfectacle.github.io/tags/Closure/"/>
    
  </entry>
  
  <entry>
    <title>(자알쓰) JIT 컴파일</title>
    <link href="http://perfectacle.github.io/2017/08/07/js-jit-compile/"/>
    <id>http://perfectacle.github.io/2017/08/07/js-jit-compile/</id>
    <published>2017-08-07T02:53:42.000Z</published>
    <updated>2017-08-07T06:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""></p>
<h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>이번에는 쉬어가는 타임으로 번외편 격인 JIT 컴파일에 대해 간단히 다뤄보았다.  </p>
<h2 id="자바스크립트는-인터스크립트-언어이다"><a href="#자바스크립트는-인터스크립트-언어이다" class="headerlink" title="자바스크립트는 인터스크립트 언어이다?"></a>자바스크립트는 인터스크립트 언어이다?</h2><p>책을 보면 위와 같이 말하는 경우가 존재한다.<br>인터스크립트가 뭔데?에서 부터 막힌다면 아래 내용을 봐보자.  </p>
<h2 id="컴퓨터는-우리의-소스코드를-어떻게-이해할까"><a href="#컴퓨터는-우리의-소스코드를-어떻게-이해할까" class="headerlink" title="컴퓨터는 우리의 소스코드를 어떻게 이해할까?"></a>컴퓨터는 우리의 소스코드를 어떻게 이해할까?</h2><p>기본적으로 컴퓨터는 기계어(2진수(0과 1)로 이루어진 코드) 밖에 해석하지 못한다.<br><del>바보 녀석 ㅎㅎ</del><br>왜 10진수가 아닌 2진수를 사용하게 됐는지 궁금한 사람은 <a href="/2017/08/07/computer-number-making-reason/">컴퓨터에서 2진수, 8진수, 16진수를 쓰게 된 이유</a>를 참고하자.</p>
<p>따라서 우리가 작성한 <code>var a = &#39;a&#39;</code>라는 코드를 기계어로 바꿔주는 행위를 해야한다.<br><img src="realprogrammers.png" alt="이게 귀찮은 사람은 처음부터 기계어로 코딩하면 된다. (뇌가 좋다면...)"><br>이걸 사람이 직접 바꿔줘야할까…?<br>매우 비효율적이므로 당연히 이를 도와주는 도구가 있는데 그 중 하나가 인터프리터이다.</p>
<h2 id="인터프리트란…-Interpret"><a href="#인터프리트란…-Interpret" class="headerlink" title="인터프리트란…?(Interpret)"></a>인터프리트란…?(Interpret)</h2><p>코드를 실행하면서 한 줄 한 줄 기계어로 변환 후 실행하는 걸 인터프리트(Interpret)라고 한다.<br>이 인터프리트하는 녀석을 인터프리터라고 부른다.<br>자바스크립트는 이런 인터프리트 방식을 채택한 프로그래밍 언어<strong>였었다.</strong></p>
<p>자바스크립트는 이런 인터프리트 방식을 채택한 프로그래밍 언어<strong>였었다</strong>라고…?<br>그럼 과거에는 그렇고 지금은 아니라는 말인가…?<br><img src="correct.jpeg" alt="딩!동!댕!"><br>모던 브라우저의 자바스크립트 엔진은 모두 JIT 컴파일 방식으로 Javascript 코드를 해석하고 있다.  </p>
<ul>
<li>구글에서 개발한 V8(크롬, 오페라와 Node.js)  </li>
<li>모질라에서 개발한 TraceMonkey(파이어폭스 3.5+부터 탑재)  </li>
<li>MS에서 개발한 Chakra(IE9+부터 탑재)  </li>
<li>Webkit 엔진에 탑재된 JavascriptCore(Safari에 탑재)  </li>
</ul>
<h2 id="컴파일이란…-Compile"><a href="#컴파일이란…-Compile" class="headerlink" title="컴파일이란…?(Compile)"></a>컴파일이란…?(Compile)</h2><p>이 JIT 컴파일에 대해 알아보기 이전에 컴파일에 대해 알아보도록 하자.<br>우리가 짠 코드 <strong>전체를 한 번에</strong> 기계어로 변환해주는 걸 말한다.<br>이러한 일을 컴파일러(Compiler)가 대신해준다.  </p>
<h2 id="JIT-컴파일이란…-Just-in-Time-Compile"><a href="#JIT-컴파일이란…-Just-in-Time-Compile" class="headerlink" title="JIT 컴파일이란…?(Just in Time Compile)"></a>JIT 컴파일이란…?(Just in Time Compile)</h2><p>컴파일 방식과 인터프리트 방식의 장점을 짬뽕한 녀석이라고 보면 된다.<br>컴파일 방식은 기계어로 컴파일 된 코드를 바로 실행하므로 빠른 실행 속도를 보장 받는다.<br>인터프리트 방식은 소스가 수정돼도 귀찮게 매번 컴파일을 하지 않아도 된다는 장점이 존재한다.<br>이 JIT 컴파일 방식은 <strong>프로그램을 실행하는 시점에서 필요한 부분을 즉석에서 컴파일</strong>하는 방식이라 동적 컴파일(Dynamic Compile)이라고도 부른다.<br>당연히 과거 인터프리트 방식보다 성능 측면에서 향상이 있어서 사용한다고 보면 될 것 같다.<br>인터프리트는 한줄씩 해석 - 실행 - 해석 - 실행의 반복인데<br>JIT 컴파일은 실행할 때 한번에 해석 - 실행이기 때문이다.</p>
<p>결론적으로 자바스크립트가 인터프리트 언어라는 것은 과거에나 먹힐 법한 말이고 모던 브라우저(최신 브라우저)와 Node에서는 JIT 컴파일 언어라로 부르는 것이 맞다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;자알쓰란&quot;&gt;&lt;a href=&quot;#자알쓰란&quot; class=&quot;headerlink&quot; title=&quot;자알쓰란?&quot;&gt;&lt;/a&gt;자알쓰란?&lt;/h2&gt;&lt;p&gt;&lt;code&gt;자&lt;/code&gt;바스크립트 &lt;cod
    
    </summary>
    
      <category term="Programming" scheme="http://perfectacle.github.io/categories/Programming/"/>
    
      <category term="ECMAScript" scheme="http://perfectacle.github.io/categories/Programming/ECMAScript/"/>
    
      <category term="자알쓰" scheme="http://perfectacle.github.io/categories/Programming/ECMAScript/%EC%9E%90%EC%95%8C%EC%93%B0/"/>
    
    
      <category term="JS" scheme="http://perfectacle.github.io/tags/JS/"/>
    
      <category term="ES" scheme="http://perfectacle.github.io/tags/ES/"/>
    
      <category term="자알쓰" scheme="http://perfectacle.github.io/tags/%EC%9E%90%EC%95%8C%EC%93%B0/"/>
    
      <category term="JIT" scheme="http://perfectacle.github.io/tags/JIT/"/>
    
  </entry>
  
  <entry>
    <title>(상식) 컴퓨터는 어떻게 우리가 작성한 코드를 이해할까?</title>
    <link href="http://perfectacle.github.io/2017/08/07/how-can-computer-understand-our-source/"/>
    <id>http://perfectacle.github.io/2017/08/07/how-can-computer-understand-our-source/</id>
    <published>2017-08-07T01:02:39.000Z</published>
    <updated>2017-08-07T06:12:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="">  </p>
<p>기본적으로 컴퓨터는 기계어(2진수(0과 1)로 이루어진 코드) 밖에 해석하지 못한다.<br><del>바보 녀석 ㅎㅎ</del><br>왜 10진수가 아닌 2진수를 사용하게 됐는지 궁금한 사람은 <a href="/2017/08/07/computer-number-making-reason/">컴퓨터에서 2진수, 8진수, 16진수를 쓰게 된 이유</a>를 참고하자.  </p>
<p>따라서 우리는 우리가 짠 코드를 기계어로 바꾸는 행위를 해야한다.<br><img src="realprogrammers.png" alt="이게 귀찮은 사람은 처음부터 기계어로 코딩하면 된다. (뇌가 좋다면...)"><br>우리의 뇌는 이렇게 좋지도 않고, 효율성 측면에서 이러한 행위를 도와주는 도구가 세 가지가 있다.</p>
<h2 id="1-컴파일-Compile"><a href="#1-컴파일-Compile" class="headerlink" title="1. 컴파일(Compile)"></a>1. 컴파일(Compile)</h2><p>우리가 짠 코드 전체를 기계어로 변환해주는 걸 말한다.<br>이러한 일을 컴파일러(Compiler)가 대신해준다.<br>언어에 의존적이므로 C언어 컴파일러, Java 컴파일러 이렇게 따로 따로 존재한다.  </p>
<h3 id="링크-Link"><a href="#링크-Link" class="headerlink" title="링크(Link)"></a>링크(Link)</h3><p>우리의 프로그램은 여러 모듈들의 조합으로 이루어져있다.<br>하지만 컴파일러는 각 모듈들을 컴파일만 해줄 뿐, 합쳐주는 역할을 하진 않는다.<br>따라서 이 링크는 여러 모듈들을 단일 프로그램으로 합치는 걸 말한다.<br>링크 하는 프로그램을 링커(Linker)라고 부른다.<br>링커가 링크한 결과로 단일 실행 파일인 *.exe 등등이 만들어진다.  </p>
<h3 id="로드-Load"><a href="#로드-Load" class="headerlink" title="로드(Load)"></a>로드(Load)</h3><p>단일 실행 파일을 메모리에 적재(Load)시키는 걸 말한다.<br>로더(Loader)가 이런 일을 한다.  </p>
<h3 id="컴파일-언어의-동작-방식"><a href="#컴파일-언어의-동작-방식" class="headerlink" title="컴파일 언어의 동작 방식"></a>컴파일 언어의 동작 방식</h3><p>코딩 - 컴파일(컴파일러에 의해) - 링크(링커에 의해) - 로드(로더에 의해)</p>
<h2 id="2-인터프리트-Interpret"><a href="#2-인터프리트-Interpret" class="headerlink" title="2. 인터프리트(Interpret)"></a>2. 인터프리트(Interpret)</h2><p>컴파일 방식은 실행 이전에 컴파일 과정을 거쳐야하므로 시간이 더 소요된다.<br>또한 내용을 바꿀 때마다 계속 컴파일을 해줘야한다는 단점이 존재한다.<br>하지만 인터프리트 방식은 소스 코드가 바뀌어도 컴파일 해주지 않아도 된다.<br>실행하면서 한 줄 한 줄 해석해(인터프리트, Interpret)나가기 때문이다.<br>이 인터프리트 해주는 녀석을 인터프리터(Interpreter)라고 부른다.<br>Javascript가 이에 속했다. (모던한 환경이라면 아니라는 소리다.)<br>하지만 단점으로 한 줄 한 줄 해석하고 실행하기 때문에 컴파일 된 파일을 실행하는 것보다는 느리다는 문제점이 존재한다.  </p>
<h2 id="3-JIT-컴파일-Just-in-Time-Compile"><a href="#3-JIT-컴파일-Just-in-Time-Compile" class="headerlink" title="3. JIT 컴파일(Just in Time Compile)"></a>3. JIT 컴파일(Just in Time Compile)</h2><p>컴파일 방식과 인터프리트 방식의 장점을 짬뽕한 녀석이라고 보면 된다.<br>컴파일 방식은 기계어로 컴파일 된 코드를 바로 실행하므로 빠른 실행 속도를 보장 받는다.<br>인터프리트 방식은 소스가 수정돼도 귀찮게 매번 컴파일을 하지 않아도 된다는 장점이 존재한다.<br>이 JIT 컴파일 방식은 <strong>프로그램을 실행하는 시점에서 필요한 부분을 즉석에서 컴파일</strong>하는 방식이라 동적 컴파일(Dynamic Compile)이라고도 부른다.<br>자바의 경우 소스코드(*.java) 파일을 JVM(Java Virtual Machine)이 이해할 수 있는 자바 바이트 코드(*.class)로 변환한다.<br>하지만 컴퓨터는 자바 바이트 코드를 해석하지 못한다.<br>따라서 JVM에서는 실행될 때 자바 바이트 코드를 기계어로 해석해주는 JIT 컴파일 방식을 채택했다.<br>또한 Javascript에서도 JS 엔진(Javascript 코드를 해석해주는 역할을 담당하며 브라우저에 의존적이다.) 중에서는 아래와 같은 녀석들이 JIT 컴파일 방식을 채택했다.  </p>
<ul>
<li>구글에서 개발한 V8(크롬, 오페라와 Node.js)  </li>
<li>모질라에서 개발한 TraceMonkey(파이어폭스 3.5+부터 탑재)  </li>
<li>MS에서 개발한 Chakra(IE9+부터 탑재)  </li>
<li>Webkit 엔진에 탑재된 JavascriptCore(Safari에 탑재)  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;기본적으로 컴퓨터는 기계어(2진수(0과 1)로 이루어진 코드) 밖에 해석하지 못한다.&lt;br&gt;&lt;del&gt;바보 녀석 ㅎㅎ&lt;/del&gt;&lt;br&gt;왜 10진수가 아닌 2진수를 사용하게 됐는지 
    
    </summary>
    
      <category term="기타" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="등등" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EB%93%B1%EB%93%B1/"/>
    
    
      <category term="JIT" scheme="http://perfectacle.github.io/tags/JIT/"/>
    
      <category term="IT" scheme="http://perfectacle.github.io/tags/IT/"/>
    
      <category term="Computer" scheme="http://perfectacle.github.io/tags/Computer/"/>
    
      <category term="기계어" scheme="http://perfectacle.github.io/tags/%EA%B8%B0%EA%B3%84%EC%96%B4/"/>
    
      <category term="컴파일" scheme="http://perfectacle.github.io/tags/%EC%BB%B4%ED%8C%8C%EC%9D%BC/"/>
    
      <category term="인터프리터" scheme="http://perfectacle.github.io/tags/%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/"/>
    
  </entry>
  
  <entry>
    <title>(상식) 왜 1byte는 8bit일까?</title>
    <link href="http://perfectacle.github.io/2017/08/07/why-1byte-is-8bit/"/>
    <id>http://perfectacle.github.io/2017/08/07/why-1byte-is-8bit/</id>
    <published>2017-08-07T00:02:39.000Z</published>
    <updated>2017-08-07T04:55:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt="이미지 출처: http://keybreak.tistory.com/125">  </p>
<p>과거에는 1byte가 7bit, 9bit 등등이던 시절이 있다고 하지만 현재는 8비트로 거의 표준이 된 것 같다.<br>왜일까?<br>이 포스트는 아래 링크를 참조하여 제 머릿 속을 바탕으로 글을 썼기 때문에 틀린 점이 있다면 댓글로 적어주길 바랍니다~</p>
<ul>
<li><a href="http://air802.tistory.com/72" rel="external nofollow noopener noreferrer" target="_blank">아스키(Ascii)</a>  </li>
<li><a href="https://kldp.org/node/153459" rel="external nofollow noopener noreferrer" target="_blank">메모리 하나당 차지하는 바이트 수에 대해 궁금한 점이 있습니다.</a>  </li>
<li><a href="https://kldp.org/node/149091" rel="external nofollow noopener noreferrer" target="_blank">메모리 주소당 데이터용량이 1바이트인 이유가 먼가요??</a>  </li>
<li><a href="http://zepeh.tistory.com/313" rel="external nofollow noopener noreferrer" target="_blank">1바이트는 왜 8비트일까?</a>  </li>
</ul>
<h2 id="컴퓨터는-미국에서-개발했다"><a href="#컴퓨터는-미국에서-개발했다" class="headerlink" title="컴퓨터는 미국에서 개발했다."></a>컴퓨터는 미국에서 개발했다.</h2><p>따라서 미국 특화(+유럽권과의 통신 등등을 고려하여 유렵권까지 특화)해서 만들었다.<br>따라서 아시아나 아프리카 등등에는 별로 특화돼있지 않았다. (지금은 많이 완화된 것 같지만…)<br>1byte의 bit 수를 결정 짓는 결정적인 요인은 아마 ASCII라는 문자 인코딩 때문일 것이다.<br>ASCII는 미국권 문자를 표현하는 문자 인코딩(문자의 집합)인데 통신을 위한 기호와 특수기호 + 숫자 + 알파벳 대소문자를 표현할 수 있다.<br>당연히 미국에서 개발했으니 미국에서 쓰이는 문자만 표현하면 되는 것이었다.<br>이 ASCII를 표현하는데는 7bit(128자)로 충분했고, 이 ASCII를 베이스로 byte(하나의 문자를 담는 단위)가 결정된 게 아닐까 싶다.  </p>
<h2 id="그렇다면-왜-1byte는-7bit가-아닌-8bit일까"><a href="#그렇다면-왜-1byte는-7bit가-아닌-8bit일까" class="headerlink" title="그렇다면 왜 1byte는 7bit가 아닌 8bit일까?"></a>그렇다면 왜 1byte는 7bit가 아닌 8bit일까?</h2><p>내가 내린 추측은 아래 두 가지이다.  </p>
<ol>
<li>데이터 송수신의 오류를 검출하기 위한 패리티 비트로 1비트가 추가됐다.  </li>
<li>유럽권을 고려해서 확장 아스키 코드를 베이스로 정했다.<br>유럽권 문자까지 표현하는데 8bit(256자)면 충분하다고 여겨서 정한 것 같다.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;이미지 출처: http://keybreak.tistory.com/125&quot;&gt;  &lt;/p&gt;
&lt;p&gt;과거에는 1byte가 7bit, 9bit 등등이던 시절이 있다고 하지만 현재는 8비트로 거의 표준이 된 것 
    
    </summary>
    
      <category term="기타" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="등등" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EB%93%B1%EB%93%B1/"/>
    
    
      <category term="IT" scheme="http://perfectacle.github.io/tags/IT/"/>
    
      <category term="Computer" scheme="http://perfectacle.github.io/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>(상식) 컴퓨터에서 2진수, 8진수, 16진수를 쓰게 된 이유</title>
    <link href="http://perfectacle.github.io/2017/08/07/computer-number-making-reason/"/>
    <id>http://perfectacle.github.io/2017/08/07/computer-number-making-reason/</id>
    <published>2017-08-06T23:02:39.000Z</published>
    <updated>2017-08-07T04:40:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="thumb.png" alt=""><br>여러 책을 보고 혼자서 내린 결론이기 때문에 틀릴 가능성이 있으니 지적해주면 감사하겠습니다 ^^</p>
<h2 id="최초의-컴퓨터는-10진수를-사용했다"><a href="#최초의-컴퓨터는-10진수를-사용했다" class="headerlink" title="최초의 컴퓨터는 10진수를 사용했다."></a>최초의 컴퓨터는 10진수를 사용했다.</h2><p>나는 처음부터 2진수를 사용한 줄 알았는데 최초의 컴퓨터인 <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%8B%88%EC%95%85" rel="external nofollow noopener noreferrer" target="_blank">에니악</a>은 10진수를 사용했다고 한다.<br>아마도 우리의 손가락이 10개이고 평상시에 연산을 할 때도 10진수를 주로 사용하기 때문에 익숙해서 10진수를 사용했던 게 아닐까?  </p>
<h2 id="그럼-왜-컴퓨터는-2진수를-사용하게-됐을까"><a href="#그럼-왜-컴퓨터는-2진수를-사용하게-됐을까" class="headerlink" title="그럼 왜 컴퓨터는 2진수를 사용하게 됐을까?"></a>그럼 왜 컴퓨터는 2진수를 사용하게 됐을까?</h2><p>전기회로는 전압이 불안정해서 전압을 10단계로 나누어 처리하는데 한계가 있다.<br>따라서 에니악과 <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%93%9C%EC%82%AD" rel="external nofollow noopener noreferrer" target="_blank">에드삭</a>은 10진수를 이용했던 데 반해<br>그 후속 시리즈인 <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%93%9C%EB%B0%95" rel="external nofollow noopener noreferrer" target="_blank">에드박</a>은 전압을 2단계로 나누어 처리하는 2진수를 사용하였다.<br>즉, 전기가 흐르면 1, 전기가 흐르지 않으면 0만으로 동작하게 설계하게 된 것이다.<br>결론을 내리자면 <strong>전기회로는 전압이 불안정해서 전압을 두 단계로 나누어 처리하는 게 안정적이다 보니 2진수를 사용하게 된 것이다.</strong></p>
<h2 id="8진수-16진수는-왜-생겼을까-4진수는-왜-안-쓰이는-것일까"><a href="#8진수-16진수는-왜-생겼을까-4진수는-왜-안-쓰이는-것일까" class="headerlink" title="8진수, 16진수는 왜 생겼을까? 4진수는 왜 안 쓰이는 것일까?"></a>8진수, 16진수는 왜 생겼을까? 4진수는 왜 안 쓰이는 것일까?</h2><p>2진수는 숫자를 표현하기 위해 상당히 많은 자릿수를 차지한다.<br>코딩할 때도 이렇게 많은 자릿수는 가독성을 해칠 수 있다.<br>따라서 이런 단점을 보완하기 위해 8진수와 16진수가 등장했다.<br>그렇다면 왜 8진수와 16진수일까?<br>2진수 2자리로는 4진수를<br>2진수 3자리로는 8진수를<br>2진수 4자리로는 16진수를 표현할 수 있다.<br>2진수 2자리는 그닥 많은 자릿수를 절약할 수 없어서 사용을 안 하게 된 게 아닐까 싶다…<br>8진수를 사용하는 대표적인 예는 리눅스나 FTP 등에서 파일이나 폴더에 관한 권한을 표현하기 위해 많이 쓰인다.<br>777 을 예로 들면<br>r 읽기 허용(4) w 쓰기 허용(2) x 실행 허용(1) 을 다 더하면 7이 나오고<br>u 사용자(소유자) g 그룹 o 기타(사용자와 그룹을 제외한 사람) 순서로 기술하면 된다.<br>16진수를 사용하는 대표적인 예는 rgb 컬러 코드(#ff00ff), 유니코드(\u0061, U+0061, 0x0061 등등)에서 쓰인다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;thumb.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;여러 책을 보고 혼자서 내린 결론이기 때문에 틀릴 가능성이 있으니 지적해주면 감사하겠습니다 ^^&lt;/p&gt;
&lt;h2 id=&quot;최초의-컴퓨터는-10진수를-사용했다&quot;&gt;&lt;a href=&quot;#최초의-컴퓨터는
    
    </summary>
    
      <category term="기타" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="등등" scheme="http://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EB%93%B1%EB%93%B1/"/>
    
    
      <category term="IT" scheme="http://perfectacle.github.io/tags/IT/"/>
    
      <category term="Computer" scheme="http://perfectacle.github.io/tags/Computer/"/>
    
      <category term="진법" scheme="http://perfectacle.github.io/tags/%EC%A7%84%EB%B2%95/"/>
    
  </entry>
  
</feed>
